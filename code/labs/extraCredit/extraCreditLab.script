Script started on 2020-05-05 18:54:46-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit/src[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit/src[00m$ clojure
Clojure 1.10.1
user=> (+ 1 2 3 4 5)
15
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit/src[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit/src[00m$ exit

Script done on 2020-05-05 18:55:22-0400
Script started on 2020-05-05 18:56:17-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ slojure[Kclojure
Clojure 1.10.1
user=> (fn [x] (+ x x))
#object[user$eval136$fn__137 0x6d467c87 "user$eval136$fn__137@6d467c87"]
user=> ((fn[x[    x[  [x] (+xx   x x)) 21)
42
user=> ((fn [x y] (+ (* x x) (* y y))) 3 4)
25
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 18:58:24-0400
Script started on 2020-05-05 19:05:15-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ s[Kclojure
Clojure 1.10.1
user=> ((fn [x y z] (max (Math/abs x) (Math/abs y) (Math/abs z) )) 1 -20 10)
20
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:05:26-0400
Script started on 2020-05-05 19:07:43-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> ((fn [x y z] (+ x y z)) 10 20 30)
60
user=> ((fn [x] (nil? x)) 0)
false
user=> ((fn [] 17.2))
17.2
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:08:05-0400
Script started on 2020-05-05 19:09:29-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (def triple (fn [x] (* x 3)))
#'user/triple
user=> (triple 4)
12
user=> (#(* % 3) 4)
12
user=> #(+ (* %1 %1) (* %2 %2))
#object[user$eval149$fn__150 0x2e52fb3e "user$eval149$fn__150@2e52fb3e"]
user=> (#(+ (* %1 %1) (* %2 %2)) 3 4)
25
user=> (def sum2Squares #(+ (* %1 %1) (* %2 %2)))
#'user/sum2Squares
user=> (sum2Squares 3 4)
25
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:13:47-0400
Script started on 2020-05-05 19:19:01-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (def squareSquare #(Math/pow (Math/pow % 2) 2))
#'user/squareSquare
user=> (squareSquare 5)
625.0
user=> (squareSquare 2)
16.0
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:20:48-0400
Script started on 2020-05-05 19:22:22-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ (map inc [1 2 3 4]) ^C
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (map inc [1 2 3 4]) 
(2 3 4 5)
user=> (map - [1 2 3 4])
(-1 -2 -3 -4)
user=> (map - [1 2 3 4] [1 2 3 4])
(0 0 0 0)
user=> (map even? [1 2 3 4])
(false true false true)
user=> (map str ["a" "b" "c"] ["A" "B" "C"])
("aA" "bB" "cC")
user=> (map count [[11] [11 22] [11 22 33]])
(1 2 3)
user=> (map + [1 2 3 4] [1 2 3 4])
(2 4 6 8)
user=> (map * [1 2 3 4] [1 2 3 4])
(1 4 9 16)
user=> (Math/abs -3)
3
user=> (map Math/abs [-1 2 -3 4 -5])
Syntax error compiling at (REPL:1:1).
Unable to find static field: abs in class java.lang.Math
user=> (map (fn [x] (if (< x 0) (- x) x)) [-1 2 -3 4 -5])
(1 2 3 4 5)
user=>    (defn subtract-n [n sequence]
   	(map (fn [x] (- x n)) sequence)
   )
#'user/subtract-n
user=> (subtract-n 2 [5 6 7 8])
(3 4 5 6)
user=> (filter odd? [1 2 3 4])
(1 3)
user=> (filter even? [1 2 3 4])
(2 4)
user=> (filter neg? [1 2 3 4])
()
user=> (filter neg? [-1 1 -2 2 -3 3])
(-1 -2 -3)
user=> (filter pos?  [-1 1 -2 2 -3 3])
(1 2 3)
user=> (filter (fn [x] (and (pos? x) (even? x))) [-1 1 -2 2 -3 3 -4 4])
(2 4)
user=> (filter (fn [x] (and (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 -3)
user=> ignore that
Syntax error compiling at (REPL:0:0).
Unable to resolve symbol: ignore in this context
Syntax error compiling at (REPL:0:0).
Unable to resolve symbol: that in this context
user=> (filter (fn [x] (or (neg? x) (odd? x))) [-1 1 -2 2 -3 3 -4 4])
(-1 1 -2 -3 3 -4)
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:30:55-0400
Script started on 2020-05-05 19:44:34-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (defn negate [sequence] (map - sequence))
#'user/negate
user=> (negate [-1 2 -3])
(1 -2 3)
user=> (negate [4 -5 6])
(-4 5 -6)
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:45:00-0400
Script started on 2020-05-05 19:50:04-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ (reduce + [1 2 3])^C
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (reduce + [1 2 3])
6
user=> (reduce + '(1 2 3))
6
user=> (reduce max [1 2 3])
3
user=> (reduce conj [1 2 3] [4 5 6])
[1 2 3 4 5 6]
user=>  (reduce + [1 2 3 4 5])
15
user=> (reduce + 1 [2 3 4 5])
15
user=> (reduce + 1 '(2 3 4 5))
15
user=> (reduce max 5 [4 3 2 1])
5
user=> (reduce bit-or [1 2 3 4])
7
user=> (reduce str ["a" "b" "c"])
"abc"
user=> (reduce + 1 2 [3 4 5])
Execution error (ArityException) at user/eval21 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> (reduce + 1 '(2 3 4) 5)
Execution error (ArityException) at user/eval23 (REPL:1).
Wrong number of args (4) passed to: clojure.core/reduce
user=> (defn csv [seq]  
      (reduce (fn [a b] (str a "," b)) seq)
   )
#'user/csv
user=> (csv [11 22 33])
"11,22,33"
user=>   (defn totalItems [seqOfSeqs]
   (reduce + (map count seqOfSeqs))
  )
#'user/totalItems
user=> (totalItems [["Ann"] ["Bob" "Chris"] ["Dan" "Eve" "Fred"]])
6
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 19:55:54-0400
Script started on 2020-05-05 20:07:55-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (defn sumSquares [seq] (reduce + (map #(* % %) seq)))
#'user/sumSquares
user=> (sumSquares '(1 2 3))
14
user=> (sumSquares '(1 2 3 4 5))  
55
user=> (sumSquares [-1 -2 -3 0 1])
15
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 20:08:32-0400
Script started on 2020-05-05 20:24:51-0400
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ clojure
Clojure 1.10.1
user=> (defn incMaker [incValue]
   #(+ % incValue)
)
#'user/incMaker
user=> (def inc5 (incMaker 5))
#'user/inc5
user=> (defn greetingBuilder [greeting]
   (fn [visitor]
      (str greeting ", " visitor "!")
   )
)
#'user/greetingBuilder
user=> (def csGreeting (greetingBuilder "Welcome to CS 214"))
#'user/csGreeting
user=> (def englishGreeting (greetingBuilder "Hello"))
#'user/englishGreeting
user=> (def frenchGreeting (greetingBuilder "Bonjour"))
#'user/frenchGreeting
user=> (csGreeting "Ann")
"Welcome to CS 214, Ann!"
user=> (englishGreeting "Chris")
"Hello, Chris!"
user=> (frenchGreeting "Chris")
"Bonjour, Chris!"
user=> 
]0;djv78@gold02: ~/CS214Work/code/labs/extraCredit[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/code/labs/extraCredit[00m$ exit

Script done on 2020-05-05 20:28:22-0400
