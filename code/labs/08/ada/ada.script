Script started on 2020-04-09 12:47:06-0400
]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ ls
ada.script  name_package.adb  name_package.ali  [0m[01;32mname_tester[0m      name_tester.ali
Makefile    name_package.ads  name_package.o    name_tester.adb  name_tester.o
]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ cat name_tester.adb
-- name_tester.adb "test-drives" the Name type.
--
-- Begun by: Dr. Adams, CPSC 280, October 1999.
-- Completed by: Duncan Van Keulen
-- Date: 2/9/2020
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;
with Name_Package; use Name_Package;

procedure name_tester is

  aName : Name_Package.Name;


begin
  Init(aName, "John    ", "Paul    ", "Jones   ");

  pragma Assert( getFirst(aName) = "John    ",
                  "getFirst() failed");
  pragma Assert( getMiddle(aName) = "Paul    ", 
                  "getMiddle() failed");
  pragma Assert( getLast(aName) = "Jones   ", 
                  "getLast() failed");
  pragma Assert( getFullName(aName) = "John     Paul     Jones   ",
                    "getFullName() failed");
  Put(aName); New_line;
  Put("All tests passed!"); New_line;
end name_tester;

]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ cat name_package.ads
-- name_package.ads declares the Name type and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 2/9/2020
--------------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package Name_Package is

type Name is private;

----------------------------------------------
-- Init initializes a Name variable          -
-- Receive: theName, the Name variable;      -
--          First, the first name;           -
--          Middle, the middle name;         -
--          Last, the last name.             -
-- Return: theName, its fields set to First, -
--               Middle, and Last.           -
----------------------------------------------

procedure Init(Nm : out Name;
    First, Middle, Last : in String);


----------------------------------------------
-- getFirst(Name) retrieves Name.myFirst     -
-- getMiddle(Name) retrieves Name.myMiddle   -
-- getLast(Name) retrieves Name.myLast       -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- Return: theName.myFirst, theName.myMiddle,-
--         and theName.myLast respectively.  -
----------------------------------------------

function getFirst(Nm : in Name) return String;

function getMiddle(Nm : in Name) return String;

function getLast(Nm : in Name) return String;


-----------------------------------------------
-- getFullName(Name) retrieves Name as a String  -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function getFullName(Nm : in Name) return String;

----------------------------------------------
-- Put(Name) displays a Name value.          -
-- PRE: theName has been initialized.        -
-- Receive: theName, a Name.                 -
-- Output: theName, to the screen.           -
----------------------------------------------

procedure Put(Nm : in Name);

----------------------------------------------
-- setFirst(Name) sets Name.myFirst          -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.first will be updated       -
----------------------------------------------

procedure setFirst(TheName : in out Name; NewName : in String);

----------------------------------------------
-- setMiddle(Name) sets Name.myMiddle        -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.middle will be updated      -
----------------------------------------------

procedure setMiddle(TheName : in out Name; NewName : in String);

----------------------------------------------
-- setLast(Name) sets Name.myLast            -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.last will be updated        -
----------------------------------------------

procedure setLast(TheName : in out Name; NewName : in String);

-----------------------------------------------
-- lfmi(Name) retrieves Name as a String      -
--     ordered last, first middle initial     -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function lfmi(TheName : in Name) return String;

----------------------------------------------
-- read(Name) sets MyFirst, MyMiddle, MyLast -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: MyFirst, MyMiddle, and MyLast will  -
--      be set to new values read in through -
--      the keyboard                         -
----------------------------------------------

procedure read(TheName : in out Name);


private

NAME_SIZE : constant Integer := 8;

type Name is 
    record
        MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);
    end record;

end Name_Package;

]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ cat name_package.adb
-- name_package.adb defines operations for the Name type.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 2/9/2020
---------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package body Name_Package is

----------------------------------------------
-- Init initializes a Name variable          
-- Receive: Nm, the Name variable;          
--          First, the first name;         
--          Middle, the middle name;      
--          Last, the last name.         
-- Return: Nm, its fields set to First, 
--               Middle, and Last.     
----------------------------------------------

procedure Init(Nm: out Name;
                First, Middle, Last : in String) is
begin
    Nm.MyFirst := First;
    Nm.MyMiddle := Middle;
    Nm.MyLast := Last;
end Init;

----------------------------------------------
-- getFirst(Name) retrieves Name.myFirst        
-- Receive: Nm, a Name.                      
-- PRE: Nm has been initialized.            
-- Return: Nm.myFirst.                     
----------------------------------------------
function getFirst( Nm: in Name) return String is
begin
    return Nm.MyFirst;
end getFirst;

----------------------------------------------
-- getMiddle(Name) retrieves Name as a String 
-- Receive: Nm, a Name.        
-- PRE: Nm has been initialized.
-- Return: Nm.myMiddle. 
----------------------------------------------
function getMiddle( Nm: in Name) return String is
begin
    return Nm.MyMiddle;
end getMiddle;

----------------------------------------------
-- getLast(Name) retrieves Name.myLast       
-- Receive: Nm, a Name.                    
-- PRE: Nm has been initialized.            
-- Return: Nm.myLast.                        
----------------------------------------------
function getLast( Nm: in Name) return String is
begin
    return Nm.MyLast;
end getLast;

----------------------------------------------
-- getFullName(Name) retrieves Name as a String -
-- Receive: Nm, a Name.                      -
-- PRE: Nm has been initialized.             -
-- Return: a String representation of Nm.    -
----------------------------------------------
function getFullName( Nm: in Name) return String is
begin
    return Nm.MyFirst & " "
        & Nm.MyMiddle & " "
        & Nm.MyLast;
end getFullName;

----------------------------------------------
-- Put(Name) displays a Name value.          -
-- PRE: Nm has been initialized.             -
-- Receive: Nm, a Name.                      -
-- Output: Nm, to the screen.                -
----------------------------------------------
procedure Put(Nm: in Name) is
begin
    Put( getFullName(Nm) );
end Put;

----------------------------------------------
-- setFirst(Name) sets Name.myFirst          -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.first will be updated       -
----------------------------------------------

procedure setFirst(TheName : in out Name; NewName : in String) is
begin
    TheName.MyFirst := NewName;
end setFirst;

----------------------------------------------
-- setMiddle(Name) sets Name.myMiddle        -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.middle will be updated      -
----------------------------------------------

procedure setMiddle(TheName : in out Name; NewName : in String) is
begin
    TheName.MyMiddle := NewName;
end setMiddle;

----------------------------------------------
-- setLast(Name) sets Name.myLast            -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.last will be updated        -
----------------------------------------------

procedure setLast(TheName : in out Name; NewName : in String) is
begin
    TheName.MyLast := NewName;
end setLast;

-----------------------------------------------
-- lfmi(Name) retrieves Name as a String      -
--     ordered last, first middle initial     -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function lfmi(TheName : in Name) return String is
begin
    return getLast(TheName) & ", " & getFirst(TheName) & " " 
        & TheName.MyMiddle(TheName.MyMiddle'first) & ".";
end lfmi;

----------------------------------------------
-- read(Name) sets MyFirst, MyMiddle, MyLast -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: MyFirst, MyMiddle, and MyLast will  -
--      be set to new values read in through -
--      the keyboard                         -
----------------------------------------------

procedure read(TheName : in out Name) is
begin
    Get(TheName.MyFirst);
    Get(TheName.MyMiddle);
    Get(TheName.MyLast);
end read;

end Name_Package;
]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ make
make: 'name_tester' is up to date.
]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ ./name_tester
John     Paul     Jones   
All tests passed!
]0;djv78@gold02: ~/CS214Work/214/labs/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/08/ada[00m$ exit

Script done on 2020-04-09 12:47:59-0400
