Script started on 2020-04-06 17:37:38-0400
]0;djv78@gold02: ~/CS214Work/214/labs/07/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/07/ada[00m$ cat name_s[Ktester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen 
-- Date: 4-2-2020
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

    NAME_SIZE : constant Integer := 8;

    type Name is 
        record
            MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);
        end record;

aName : Name ;

----------------------------------------------
-- Init initializes a Name variable          -
-- Receive: theName, the Name variable;      -
--          First, the first name;           -
--          Middle, the middle name;         -
--          Last, the last name.             -
-- Return: theName, its fields set to First, -
--               Middle, and Last.           -
----------------------------------------------

procedure Init(TheName : out Name;
    First, Middle, Last : in String) is    

begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
end Init;


----------------------------------------------
-- getFirst(Name) retrieves Name.myFirst        -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- Return: theName.myFirst.                  -
----------------------------------------------

function getFirst(TheName : in Name) return String is
begin
    return TheName.myFirst;
end getFirst;

function getMiddle(TheName : in Name) return String is
begin
    return TheName.myMiddle;
end getMiddle;

function getLast(TheName : in Name) return String is
begin
    return TheName.myLast;
end getLast;


-----------------------------------------------
-- getFullName(Name) retrieves Name as a String  -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function getFullName(TheName : in Name) return String is
begin
    return getFirst(TheName) & ' ' & getMiddle(TheName) & ' ' & getLast(TheName);
end getFullName;

----------------------------------------------
-- Put(Name) displays a Name value.          -
-- PRE: theName has been initialized.        -
-- Receive: theName, a Name.                 -
-- Output: theName, to the screen.           -
----------------------------------------------

procedure Put(TheName : in Name) is
begin
    Put(getFullName(TheName));
end Put;


begin
    Init(aName, "John    ", "Paul    ", "Jones   ");

    pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
    pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
    pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
    pragma Assert( getFullName(aName) = "John     Paul     Jones   ", "getFullName() failed");

    Put(aName); New_line;
    Put("All tests passed!"); New_line;

end name_tester;

]0;djv78@gold02: ~/CS214Work/214/labs/07/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/07/ada[00m$ make ada
make: Nothing to be done for 'ada'.
]0;djv78@gold02: ~/CS214Work/214/labs/07/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/07/ada[00m$ ./name_tester 
John     Paul     Jones   
All tests passed!
]0;djv78@gold02: ~/CS214Work/214/labs/07/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/labs/07/ada[00m$ cd [K[K[Kexit

Script done on 2020-04-06 17:38:17-0400
