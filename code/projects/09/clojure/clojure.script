Script started on 2020-04-20 19:44:27-0400
]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ cat src/*.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: Duncan Van Keulen
;; Date: 4/20/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [aList]
  (if (list? aList) 
    ;; True
    (if (empty? aList) 

      ;; True
      nil

      ;; False
      (let [firstVal (first aList)]
        (if (= (count aList) `1) 
          ;; True
          firstVal
          ;; False
          (maxOf2 firstVal (listMax (rest aList)))
        ) ;; inner if
      ) ;; let
    )
    
    ;; False
    nil
    
  ) ;; if
)

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
    )                     ;        the items in aList
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; search() searches a list for a value
;; Receive: aList, a list of values.  
;; Recieve: aValue, an integer to be searched for  
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the index of the aValue in aList or -1 if not found         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn search [aList aValue]
  (if (list? aList)
    (if (empty? aList) 
      ;; True
      -1 ; if the list is empty, we didn't find the value
      ;; false
      (loop 
        [
        tempList aList
        i 0 
        ]

        (if (= aValue (first tempList))
          ;; True
          i ; return i indicating the index of the value
          ;; False
          (do 
            (if (empty? tempList)
              ;; True
              -1 
              ;; False
              (recur (rest tempList) (inc i))
            ) ;; (if (emtpy? tempList))
          ) ;; if false do...
        ) ;; if val = first of tempList
      ) ;; loop
    ) ;; ending if empty?
  ) ;; ending if list?
)
;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Duncan Van Keulen
;; Date: 4/20/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      emptyList '()                  ; list is empty
      list4 (list 11 22 33 44 55 66 77 88) ; 99 not present
    ]

    ;; Test max function
    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)

    (println "The max value in list1 using listMax2 is: " (listMax2 list1))
    (println "The max value in list2 using listMax2 is: " (listMax2 list2))
    (println "The max value in list3 using listMax2 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list using listMax2 is is: " (listMax2 emptyList))
    (println)

    ;; Test search function

    (println "The position of 99 in list1 is: " (search list1 99))
    (println)
    (println "The position of 99 in list2 is: " (search list2 99))
    (println)
    (println "The position of 99 in list3 is: " (search list3 99))
    (println)
    (print "The position of 99 in list4 is: " ) (flush)
    (if (= (search list4 99) -1) 
      (print "99 not present in list, -1 returned")
    )
    (flush)
    (println)
  ) ;; let
) ;; main

]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ sloj[Kclojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

The max value in list1 using listMax2 is:  99
The max value in list2 using listMax2 is:  99
The max value in list3 using listMax2 is:  99

The max of an empty list using listMax2 is is:  nil

The position of 99 in list1 is:  0

The position of 99 in list2 is:  4

The position of 99 in list3 is:  2

The position of 99 in list4 is: 99 not present in list, -1 returned
]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ exit

Script done on 2020-04-20 19:44:47-0400
