Script started on 2020-04-20 15:47:32-0400
]0;djv78@gold03: ~/CS214Work/214/projects/09/java[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/java[00m$ cat Max.java
/* Max.java finds the maximum values in Java linked lists.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: Duncan Van Keulen, extended for project 09
 * Date: 4/20/2020
 */

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;

public class Max {

  public static void main(String [] args) {
    // define list1, list2, list3 here ...
    LinkedList<Integer> list1 = new LinkedList<Integer>();
    LinkedList<Integer> list2 = new LinkedList<Integer>();
    LinkedList<Integer> list3 = new LinkedList<Integer>();
    LinkedList<Integer> list4 = new LinkedList<Integer>();
    


    list1.add(99);    // 99, 88, 77, 66, 55
    list1.add(88);    // max is first
    list1.add(77);
    list1.add(66);  
    list1.add(55);

    list2.add(55);    // 55, 66, 77, 88, 99
    list2.add(66);    // max is last
    list2.add(77);  
    list2.add(88);  
    list2.add(99);  
  
    list3.add(55);    // 55, 77, 99, 88, 66
    list3.add(77);    // max is in the middle
    list3.add(99);  
    list3.add(88);  
    list3.add(66);  
  
    print(list1); 
    print(list2); 
    print(list3);

   // display maxima of the 3 lists...
    System.out.println("Max of list1: " + Collections.max(list1));
    System.out.println("Max of list2: " + Collections.max(list2));
    System.out.println("Max of list3: " + Collections.max(list3));

    // test the search method by searching for 99...
    System.out.println("\nThe position of 99 in list1 is: " + search(list1, 99));
    System.out.println("The position of 99 in list2 is: " + search(list2, 99));
    System.out.println("The position of 99 in list3 is: " + search(list3, 99));

    // populate list4 with values not including 99 to test on that
    list4.add(11);
    list4.add(22);
    list4.add(33);
    list4.add(44);
    list4.add(55);
    list4.add(66);
    list4.add(77);
    list4.add(88);
    list4.add(00);

    System.out.print("The position of 99 in list4 (should return -1) is... ");
    if(search(list4, 99) == -1) {
      System.out.println("Requested value not found: search returned (" + search(list4, 99) + ")");
    }


  }

  /**
   * print() displays a LinkedList on the console.
   *
   * @param: aList, a LinkedList<Integer>
   * 
   *                Postcondition: the Integer values in aList have been displayed
   *                to System.out, separated by spaces.
   */
  public static void print(LinkedList<Integer> aList) {
    Iterator<Integer> listIterator = aList.iterator();
    while (listIterator.hasNext()) {
        System.out.print(listIterator.next() + " ");
    }
    System.out.print('\n');
  }

  /*
  * search() traverses and searches a LinkedList for a value
  * @param: aList, a LinkedList<Integer>
  * @param: aValue, an integer; the value to be searched for
  * Return: The location of the value in the list, or -1 if not found
  */
  public static int search(LinkedList<Integer> aList, int aValue) {
    for(int i = 0; i < aList.size(); i++) {
      if(aValue == aList.get(i)) {
        return i;
      }
    }
    return -1;
  }
}
]0;djv78@gold03: ~/CS214Work/214/projects/09/java[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/java[00m$ make
make: 'Max.class' is up to date.
]0;djv78@gold03: ~/CS214Work/214/projects/09/java[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/java[00m$ java Max
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
Max of list1: 99
Max of list2: 99
Max of list3: 99

The position of 99 in list1 is: 0
The position of 99 in list2 is: 4
The position of 99 in list3 is: 2
The position of 99 in list4 (should return -1) is... Requested value not found: search returned (-1)
]0;djv78@gold03: ~/CS214Work/214/projects/09/java[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/java[00m$ exit

Script done on 2020-04-20 15:47:45-0400
Script started on 2020-04-20 16:13:52-0400
]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ cat *.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/20/2020
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
      A_List.Its_First := Temp_Ptr;
    else
      A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List) is
  Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin 
    while Temp_Ptr /= null loop
      Put(' '); Put(Temp_Ptr.Its_Value);
      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;
  end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
    Max_Value : Integer := -99999999;
  begin
    while Temp_Ptr /= null loop

      if Temp_Ptr.Its_Value > Max_Value then
        Max_Value := Temp_Ptr.Its_Value;
      end if;

      Temp_Ptr := Temp_Ptr.Its_Next;
    end loop;

    return Max_Value;
  end Max;

  ---------------------------------------
  -- Search a list for a value by       -
  --    traversing said list
  -- Receive: aList, a List.            -
  -- Recieve: A_Value, an ingeger; the  -
  --    value to search/traverse for    -
  -- Return: the index of the value in  -
  --    the list if found, -1 otherwise - 
  ---------------------------------------
  function Search(A_List : in List; A_Value : in Integer) return Integer is
    Temp_Ptr : Node_Ptr := A_List.Its_First;
  begin
    for i in 1..Length(A_List) loop

      if Temp_Ptr.Its_Value = A_Value then
        return i;
      end if;

      Temp_Ptr := Temp_Ptr.Its_Next;

    end loop;
      return -1; -- if this was reached, the value was not found
  end Search;

end List_Package;

-- max.adb finds the max of a list of integers. 
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/20/2020
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure Max is 
                              -- define 3 lists 
  List1, List2, List3, List4 : List; 
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3); 
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 

Append(11, List4);
Append(22, List4);
Append(44, List4);
Append(55, List4);
Append(66, List4);
Append(77, List4);
Append(88, List4); 
Append(00, List4); -- Skip 99

-- test the search funciton
Put("The position of 99 in list1 is: ");
Put(search(list1, 99));
New_Line;

Put("The position of 99 in list2 is: ");
Put(search(list2, 99));
New_Line;

Put("The position of 99 in list3 is: ");
Put(search(list3, 99));
New_Line;



Put("The position of 99 in list4 is: ");
if search(list4, 99) = -1 then
  Put("Number not found, -1 recieved");
end if;
New_Line;

end Max; 

]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ cat *([K.ads
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen 
-- Date: 4/20/2020
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------

  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------

  function Max(A_List : in List) return Integer;

  ---------------------------------------
  -- Search a list for a value          -
  -- Receive: aList, a List.            -
  -- Recieve: A_Value, an ingeger; the  -
  --    value to search/traverse for    -
  -- Return: the index of the value in  -
  --    the list if found, -1 otherwise - 
  ---------------------------------------
  function Search(A_List : in List; A_Value : in Integer) return Integer;

  private

    type List_Node;

    type Node_Ptr is access List_Node;

    type List_Node is record 
      Its_Value : Integer;
      Its_Next : Node_Ptr;
    end record;


  type List is record
    Its_First : Node_Ptr;
    Its_Last : Node_Ptr;
    Its_Length : Integer;
  end record;

end List_Package;

]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ 
[K]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ make
gcc -c -Wall max.adb
gcc -c -Wall list_package.adb
gnatbind  max.ali
gnatlink  max.ali -o adaMax
]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ ./adaMax 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The position of 99 in list1 is:           1
The position of 99 in list2 is:           5
The position of 99 in list3 is:           3
The position of 99 in list4 is: Number not found, -1 recieved
]0;djv78@gold03: ~/CS214Work/214/projects/09/ada[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ada[00m$ exit

Script done on 2020-04-20 16:14:59-0400
Script started on 2020-04-20 19:44:27-0400
]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ cat src/*.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: Duncan Van Keulen
;; Date: 4/20/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn listMax [aList]
  (if (list? aList) 
    ;; True
    (if (empty? aList) 

      ;; True
      nil

      ;; False
      (let [firstVal (first aList)]
        (if (= (count aList) `1) 
          ;; True
          firstVal
          ;; False
          (maxOf2 firstVal (listMax (rest aList)))
        ) ;; inner if
      ) ;; let
    )
    
    ;; False
    nil
    
  ) ;; if
)

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)       ; if aList is a list:
    (if (empty? aList)    ;  if aList is empty:
      nil                 ;    nil
      (apply max aList)   ;  else apply max to 
    )                     ;        the items in aList
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; search() searches a list for a value
;; Receive: aList, a list of values.  
;; Recieve: aValue, an integer to be searched for  
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the index of the aValue in aList or -1 if not found         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn search [aList aValue]
  (if (list? aList)
    (if (empty? aList) 
      ;; True
      -1 ; if the list is empty, we didn't find the value
      ;; false
      (loop 
        [
        tempList aList
        i 0 
        ]

        (if (= aValue (first tempList))
          ;; True
          i ; return i indicating the index of the value
          ;; False
          (do 
            (if (empty? tempList)
              ;; True
              -1 
              ;; False
              (recur (rest tempList) (inc i))
            ) ;; (if (emtpy? tempList))
          ) ;; if false do...
        ) ;; if val = first of tempList
      ) ;; loop
    ) ;; ending if empty?
  ) ;; ending if list?
)
;; max.clj tests a function to search a list for its maximum value.
;;
;; Output: three lists, and 
;;          the results of calling a maxList() function on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Duncan Van Keulen
;; Date: 4/20/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns max)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests function listMax(). 
;; Output: the results of testing listMax() on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      emptyList '()                  ; list is empty
      list4 (list 11 22 33 44 55 66 77 88) ; 99 not present
    ]

    ;; Test max function
    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)

    (println "The max value in list1 using listMax2 is: " (listMax2 list1))
    (println "The max value in list2 using listMax2 is: " (listMax2 list2))
    (println "The max value in list3 using listMax2 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list using listMax2 is is: " (listMax2 emptyList))
    (println)

    ;; Test search function

    (println "The position of 99 in list1 is: " (search list1 99))
    (println)
    (println "The position of 99 in list2 is: " (search list2 99))
    (println)
    (println "The position of 99 in list3 is: " (search list3 99))
    (println)
    (print "The position of 99 in list4 is: " ) (flush)
    (if (= (search list4 99) -1) 
      (print "99 not present in list, -1 returned")
    )
    (flush)
    (println)
  ) ;; let
) ;; main

]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ sloj[Kclojure -m max

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

The max value in list1 using listMax2 is:  99
The max value in list2 using listMax2 is:  99
The max value in list3 using listMax2 is:  99

The max of an empty list using listMax2 is is:  nil

The position of 99 in list1 is:  0

The position of 99 in list2 is:  4

The position of 99 in list3 is:  2

The position of 99 in list4 is: 99 not present in list, -1 returned
]0;djv78@gold03: ~/CS214Work/214/projects/09/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/clojure[00m$ exit

Script done on 2020-04-20 19:44:47-0400
Script started on 2020-04-20 19:36:01-0400
]0;djv78@gold03: ~/CS214Work/214/projects/09/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ruby[00m$ cat List.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date: 4/20/2020
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0
   def initialize
      @first, @last = nil
      @length = 0
   end 

   # create reader method for length
   attr_reader :length


   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end
  
   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode      
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen

   def print
      temp = @first
      while !temp.nil?
         printf " #{temp.value}"
         temp = temp.next
      end
   end


   # find my maximum item
   # Return: my maximum item

   def max
      temp = @first
      maxValue = -999999999
      while (temp != nil)
         if (temp.value > maxValue)
            maxValue = temp.value
         end
         temp = temp.next
      end 
      return maxValue
   end

   # Search for a value in a list
   # Return: the index of item, or -1 if not found
   
   def search(value)
      temp = @first
      i = 0
      while (temp != nil)
         if (temp.value == value)
            return i
         else
            i = i + 1
            temp = temp.next
         end
      end
      return -1
   end

   class Node
      def initialize(item, link)
         @value = item
         @next = link
      end

      attr_reader :value
      attr_accessor :next
   end

end

]0;djv78@gold03: ~/CS214Work/214/projects/09/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ruby[00m$ cat max.rb
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date: 4/20/2020

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(11).append(22).append(33).append(44).append(55) # 99 not present

# Print function
list1.print 
puts
puts "Maximum of list1: #{list1.max}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"

# Test out the search function
list1.print
puts
puts "99 is in position #{list1.search(99)} for list1"

list2.print
puts
puts "99 is in position #{list2.search(99)} for list2"

list3.print
puts
puts "99 is in position #{list3.search(99)} for list3"

list4.print
puts
if (list4.search(99) == -1)
    puts "99 not present in list4, -1 returned"
end

]0;djv78@gold03: ~/CS214Work/214/projects/09/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ruby[00m$ ls
List.rb  max.rb  ruby.script
]0;djv78@gold03: ~/CS214Work/214/projects/09/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ruby[00m$ ruby max.rb
 99 88 77 66 55
Maximum of list1: 99
 55 66 77 88 99
Maximum of list2: 99
 55 77 99 88 66
Maximum of list3: 99
 99 88 77 66 55
99 is in position 0 for list1
 55 66 77 88 99
99 is in position 4 for list2
 55 77 99 88 66
99 is in position 2 for list3
 11 22 33 44 55
99 not present in list4, -1 returned
]0;djv78@gold03: ~/CS214Work/214/projects/09/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/09/ruby[00m$ exit

Script done on 2020-04-20 19:36:23-0400
