Script started on 2020-04-06 16:25:03-0400
]0;djv78@gold02: ~/CS214Work/214/projects/07/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/07/java[00m$ cat NameTeset[K[Kter.java
import java.util.Scanner;

/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Duncan Van Keulen
 * For Proj07
 * Date: 4-6-2020
 ************************************************************/


// Tests the name class
public class NameTester {
    public static void main(String[] args) {
        Name aName = new Name("John", "Paul", "Jones");
        
        assert aName.getFirst().equals("John") ;
        assert aName.getMiddle().equals("Paul") ;
        assert aName.getLast().equals("Jones") ;
        
        System.out.println(aName);
        assert aName.toString().equals("John Paul Jones");

        // Mutator tests
        aName.setFirst("Phillip");
        assert aName.getFirst().equals("Phillip");
        
        aName.setMiddle("Joseph");
        assert aName.getMiddle().equals("Joseph");

        aName.setLast("Wheelwright");
        assert aName.getLast().equals("Wheelwright");

        // read needs a scanner object
        Scanner keyboard = new Scanner(System.in);
        aName.read(keyboard);
        System.out.println(aName.toString());
        assert aName.toString().equals("Jane Renee Doe");


        System.out.println("All tests passed!");
    }
}

// Simple class used for implementing a name of First, Middle, Last
class Name {
    private String myFirst, myMiddle, myLast;

    public Name(String first, String middle, String last) {
        myFirst = first;
        myMiddle = middle;
        myLast = last;
    }

    public String getFirst(){
        return myFirst;
    }

    public String getMiddle(){
        return myMiddle;
    }

    public String getLast(){
        return myLast;
    }

    public String toString(){
        return myFirst + ' ' + myMiddle + ' ' + myLast;
    }

    public void setFirst(String first) {
        myFirst = first;
    }

    public void setMiddle(String middle) {
        myMiddle = middle;
    }

    public void setLast(String last) {
        myLast = last;
    }

    public String lfmi() {
        return myLast + ", " + myFirst + " " + myMiddle.charAt(0) + ".";
    }

    public void read(Scanner keyboard) {
        myFirst = keyboard.nextLine();
        myMiddle = keyboard.nextLine();
        myLast = keyboard.nextLine();
    }

};
]0;djv78@gold02: ~/CS214Work/214/projects/07/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/07/java[00m$ make java
javac -deprecation NameTester.java
]0;djv78@gold02: ~/CS214Work/214/projects/07/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/07/java[00m$ java -ea NameTester
John Paul Jones
Jane Ren    
Renee
Doe
Jane Renee Doe
All tests passed!
]0;djv78@gold02: ~/CS214Work/214/projects/07/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/07/java[00m$ java -ea na[K[KNameTeseter[K[K[K[Kter
John Paul Jones
blah blee bloo


blah blee bloo  
Exception in thread "main" java.lang.AssertionError
	at NameTester.main(NameTester.java:37)
]0;djv78@gold02: ~/CS214Work/214/projects/07/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/07/java[00m$ exit

Script done on 2020-04-06 16:26:35-0400
Script started on 2020-04-06 19:58:21-0400
]0;djv78@gold04: ~/CS214Work/214/projects/07/ada[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ada[00m$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen 
-- For Proj07
-- Date: 4-6-2020
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

    NAME_SIZE : constant Integer := 8;

    type Name is 
        record
            MyFirst, MyMiddle, MyLast : String(1..NAME_SIZE);
        end record;

aName : Name ;

----------------------------------------------
-- Init initializes a Name variable          -
-- Receive: theName, the Name variable;      -
--          First, the first name;           -
--          Middle, the middle name;         -
--          Last, the last name.             -
-- Return: theName, its fields set to First, -
--               Middle, and Last.           -
----------------------------------------------

procedure Init(TheName : out Name;
    First, Middle, Last : in String) is    

begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
end Init;


----------------------------------------------
-- getFirst(Name) retrieves Name.myFirst     -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- Return: theName.myFirst.                  -
----------------------------------------------

function getFirst(TheName : in Name) return String is
begin
    return TheName.myFirst;
end getFirst;

function getMiddle(TheName : in Name) return String is
begin
    return TheName.myMiddle;
end getMiddle;

function getLast(TheName : in Name) return String is
begin
    return TheName.myLast;
end getLast;


-----------------------------------------------
-- getFullName(Name) retrieves Name as a String  -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function getFullName(TheName : in Name) return String is
begin
    return getFirst(TheName) & ' ' & getMiddle(TheName) & ' ' & getLast(TheName);
end getFullName;

----------------------------------------------
-- Put(Name) displays a Name value.          -
-- PRE: theName has been initialized.        -
-- Receive: theName, a Name.                 -
-- Output: theName, to the screen.           -
----------------------------------------------

procedure Put(TheName : in Name) is
begin
    Put(getFullName(TheName));
end Put;

----------------------------------------------
-- setFirst(Name) sets Name.myFirst          -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.first will be updated       -
----------------------------------------------

procedure setFirst(TheName : in out Name; NewName : in String) is
begin
    TheName.MyFirst := NewName;
end setFirst;

----------------------------------------------
-- setMiddle(Name) sets Name.myMiddle        -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.middle will be updated      -
----------------------------------------------

procedure setMiddle(TheName : in out Name; NewName : in String) is
begin
    TheName.MyMiddle := NewName;
end setMiddle;

----------------------------------------------
-- setLast(Name) sets Name.myLast            -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: TheName.last will be updated        -
----------------------------------------------

procedure setLast(TheName : in out Name; NewName : in String) is
begin
    TheName.MyLast := NewName;
end setLast;

-----------------------------------------------
-- lfmi(Name) retrieves Name as a String      -
--     ordered last, first middle initial     -
-- Receive: theName, a Name.                  -
-- PRE: theName has been initialized.         -
-- Return: a String representation of theName -
-----------------------------------------------

function lfmi(TheName : in Name) return String is
begin
    return getLast(TheName) & ", " & getFirst(TheName) & " " 
        & TheName.MyMiddle(TheName.MyMiddle'first) & ".";
end lfmi;

----------------------------------------------
-- read(Name) sets MyFirst, MyMiddle, MyLast -
-- Receive: theName, a Name.                 -
-- PRE: theName has been initialized.        -
-- POST: MyFirst, MyMiddle, and MyLast will  -
--      be set to new values read in through -
--      the keyboard                         -
----------------------------------------------

procedure read(TheName : in out Name) is
begin
    Get(TheName.MyFirst);
    Get(TheName.MyMiddle);
    Get(TheName.MyLast);
end read;

begin
    Init(aName, "John    ", "Paul    ", "Jones   ");

    pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
    pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
    pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
    pragma Assert( getFullName(aName) = "John     Paul     Jones   ", "getFullName() failed");

    Put(aName); New_line;

    -- "Setter" testers
    setFirst(aName, "Phillip ");
    setMiddle(aName, "Joseph  ");
    setLast(aName, "Bray    ");
    pragma Assert(  getFirst(aName) = "Phillip ", "setFirst() failed");
    pragma Assert( getMiddle(aName) = "Joseph  ", "setMiddle() failed");
    pragma Assert( getLast(aName) = "Bray    ", "setLast() failed");

    read(aName);
    pragma Assert(  getFirst(aName) = "Jane    ", "setFirst() failed");
    pragma Assert( getMiddle(aName) = "Renee   ", "setMiddle() failed");
    pragma Assert( getLast(aName) = "Doe     ", "setLast() failed");
    pragma Assert( lfmi(aName) = "Doe     , Jane     R.");
    pragma Assert( getFullName(aName) = "Jane     Renee    Doe     ", "getFullName() failed");

    Put("All tests passed!"); New_line;

end name_tester;

]0;djv78@gold04: ~/CS214Work/214/projects/07/ada[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ada[00m$ make ada
make: Nothing to be done for 'ada'.
]0;djv78@gold04: ~/CS214Work/214/projects/07/ada[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ada[00m$ ./name_tester 
John     Paul     Jones   
Jane    
Renee   
Doe     
All tests passed!
]0;djv78@gold04: ~/CS214Work/214/projects/07/ada[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ada[00m$ ./name_tester[K[Ker
John     Paul     Jones   
Bloo    
Blah    
Blee        

raised SYSTEM.ASSERTIONS.ASSERT_FAILURE : setFirst() failed
]0;djv78@gold04: ~/CS214Work/214/projects/07/ada[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ada[00m$ exit

Script done on 2020-04-06 20:01:44-0400
Script started on 2020-04-06 22:28:13-0400
]0;djv78@gold04: ~/CS214Work/214/projects/07/clojure[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/clojure[00m$ cat nameTest[K/src[K[Kcat src/nameTester.clj 
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Duncan Van Keulen
;;;; For Proj07
;;;; Date: 4-2-2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [firstName middleName lastName])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [first middle last] 
  (->Name first middle last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getMiddle [^Name aName]
  (:middleName aName)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getLast [^Name aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toString [^Name aName]
  (str (getFirst aName) " " (getMiddle aName) " " (getLast aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn printName [^Name aName] 
  (println (toString aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() "sets" the first name of a name object by 
;;;     creating a new name object
;;; Receive: aName, a Name.
;;; Output: a new name with the changed first name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setFirst [^Name aName newFirst]
  (->Name newFirst (:middleName aName) (:lastName aName))  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() "sets" the middle name of a name object by 
;;;     creating a new name object
;;; Receive: aName, a Name.
;;; Output: a new name with the changed middle name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setMiddle [^Name aName newMiddle]
  (->Name (:firstName aName) newMiddle (:lastName aName))  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() "sets" the last name of a name object by 
;;;     creating a new name object
;;; Receive: aName, a Name.
;;; Output: a new name with the changed last name
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn setLast [^Name aName newLast]
  (->Name (:firstName aName) (:middleName aName) newLast)  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Changes the format of toString to Last, First Middle Initial
;;; Receive: aName, a Name.
;;; Output: a formatted string
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lfmi [^Name aName]
  (str (getLast aName) ", " (getFirst aName) " " (subs (getMiddle aName) 0 1) ".")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Reads values into the first middle and last of a name
;;; Receive: aName, a Name.
;;; Output: a new name object with with set first, middle, last vars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn readName []
  (let [first (read)
  middle (read)
  last (read)
  ]
    (->Name first middle last)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
    name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
    name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                                ; -mapping field-names to values
    name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

  ;; ----- "Mutators" ----- 
    (let [ name3 (setFirst name2 "Phillip") 
      name4 (setMiddle name3 "Joseph")
      name5 (setLast name4 "Wheelwright")
      name6 (readName)
    ]
      (assert (= (getFirst name5) "Phillip") "getFirst failed")
      (assert (= (getMiddle name5) "Joseph") "getMiddle failed")
      (assert (= (getLast name5) "Wheelwright") "getLast failed")
      
      ;; LFMI
      (assert (= (lfmi name5) "Wheelwright, Phillip J.") "lfmi failed")
      
      ;; read
      (assert (= (toString name6) "Jane Renee Doe"))
    )

    (println "\nAll tests passed!\n")
  )
)

]0;djv78@gold04: ~/CS214Work/214/projects/07/clojure[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/clojure[00m$ clojure -0[Km nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones


#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones


#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Jane
Renee
Doe

All tests passed!

]0;djv78@gold04: ~/CS214Work/214/projects/07/clojure[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/clojure[00m$ clojure -m nameTester

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones


#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones


#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Blee
Blah
Ble oo
ExecutScript started on 2020-04-06 21:48:30-0400
]0;djv78@gold04: ~/CS214Work/214/projects/07/ruby[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ruby[00m$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# For Proj07
# Date: 4-6-2020
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name 

   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
   end

   # accessor methods
   attr_reader :first, :middle, :last

   # setter methods
   attr_writer :first, :middle, :last

   def fullName()
      first +  ' ' + middle + ' ' + last
   end

   def print
      puts(fullName())
      return fullName()
   end

   def lfmi
      return last + ", " + first + " " + middle[0] + ".";
   end

   # Change the values by reading them in from the keyboard
   def read
      @first = gets.chomp
      @middle = gets.chomp
      @last = gets.chomp
   end
end


def testName
   # Test the getters
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"

   # Setters and LFMI tests
   name.first = "Phillip"
   name.middle = "Joseph"
   name.last = "Wheelwright"

   assert name.first == "Phillip"
   assert name.middle == "Joseph"
   assert name.last == "Wheelwright"
   assert name.lfmi == "Wheelwright, Phillip J."

   # Read test
   name.read
   name.print
   assert name.first == "Jane"
   assert name.middle == "Renee"
   assert name.last == "Doe"
   
   print "All tests passed!\n"
end

testName

]0;djv78@gold04: ~/CS214Work/214/projects/07/ruby[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ruby[00m$ ruby name[KNameTester.rb 
John Paul Jones
Jane
Renee
Doe
Jane Renee Doe
All tests passed!
]0;djv78@gold04: ~/CS214Work/214/projects/07/ruby[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ruby[00m$ ruby NameTester.rb 
John Paul Jones
Han  enry
B Bloo
Blah
Henry Bloo Blah
[1mTraceback[m (most recent call last):
	7: from NameTester.rb:76:in `<main>'
	6: from NameTester.rb:69:in `testName'
	5: from /usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:130:in `assert'
	4: from /usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:1636:in `_wrap_assertion'
	3: from /usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:163:in `block in assert'
	2: from /usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:53:in `assert_block'
	1: from /usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:1631:in `_wrap_assertion'
/usr/lib/ruby/vendor_ruby/test/unit/assertions.rb:55:in `block in assert_block': [1m<false> is not true. ([1;4mTest::Unit::AssertionFailedError[m[1m)
[m]0;djv78@gold04: ~/CS214Work/214/projects/07/ruby[01;32mdjv78@gold04[00m:[01;34m~/CS214Work/214/projects/07/ruby[00m$ exit

Script done on 2020-04-06 21:49:04-0400
