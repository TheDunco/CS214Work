Script started on 2020-04-09 22:19:41-0400
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ ls
java.script  Temperature.class  Temperature.java  TemperatureTable.class  TemperatureTable.java
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ cat Temperature.java
/* Tempearture.java provides the Temperature class
* Student: Duncan Van Keulen
* Date: 4/9/2020
*************************************************/

public class Temperature {
    private Double myDegrees;
    private char myScale;

    /*
    Temperature constructor
    In: double degrees: the value of the degrees to be used
    In: char scale: the temperature scale to use
    Precondition: Scale must be one of C, K, F/c, k, f
    Precondition: Degrees must not be below absolute zero in the respective scale
    Postcondition: Temperature object will be made and instance variables
                    will be initialized
    */
    public Temperature(final double degrees, final char scale) {
        if(isValidTemperature(degrees, scale)) {
            myScale = scale;
            myDegrees = degrees;
        }
    }

    /*
    Empty temperature constructor for use with filling values in later
    */
    public Temperature() {
        myScale = 'C';
        myDegrees = 0.0;
    };

    /* 
    Checker to make sure a temperature is going to be valid
    In: double degree: the degree of the perspective Temperature
    In: char scale: the temperature scale of the perspective Temperature
    Return: Boolean indicating whether or not the temperature is valid. 
    */
    public boolean isValidTemperature(double degree, char scale) {
        // Make sure the temperature scale is one of these
        switch(scale) {
            case 'F':
            case 'f':
                if(degree >= -460.0) {
                    return true;
                }
            case 'K':
            case 'k':
                if (degree >= 0.0) {
                    return true;
                }
            case 'C':
            case 'c':
                if (degree >= -273.15) {
                    return true;
                }
            default:
                return false;
        }
    }

    // Accessor for myScale
    public char getScale() {
        return myScale;
    }

    // Accessor of myDegrees
    public double getDegrees() {
        return myDegrees;
    }

    /* 
    Upwards adjustment for degrees
    In: Temperature temp: the temperature object of which to raise the degrees by
    In: double degrees: the amount of degrees to raise the temperature by in it's scale
    Precondition: temp must be a valid temperature.
    Returns: A new temperature object with the myDegree incremented by degrees
    */
    public Temperature raise(Temperature temp, double degrees) {
        double newDeg = temp.getDegrees();
        newDeg += degrees;
        if(isValidTemperature(newDeg, temp.getScale())){
            return new Temperature(newDeg, temp.getScale());
        }
        else {
            System.out.println("Couldn't raise temperature");
            return temp;
        }
    }

    /* 
    Downwards adjustment for degrees
    In: Temperature temp: the temperature object of which to lower the degrees by
    In: double degrees: the amount of degrees to lower the temperature by in it's scale
    Precondition: temp must be a valid temperature.
    Returns: A new temperature object with the myDegree decremented by degrees
    */
    public Temperature lower(Temperature temp, double degrees) {

        double newDeg = temp.getDegrees();
        newDeg -= degrees;

        if(isValidTemperature(newDeg, temp.getScale())){
            return new Temperature(newDeg, temp.getScale());
        }
        else {
            System.out.println("Couldn't raise temperature");
            return temp;
        }
    }

    /* 
    Fahrenheit conversion
    Converty any temperature scale into Fahrenheit. 
    Returns: A new Temperature object with the myScale
            changed to the correct scale and myDegree
            updated to the correct value for that scale
    */
    public Temperature toFahrenheit() {
        switch(myScale) {
            case 'F':
            case 'f':
                return this;
            case 'C':
            case 'c':
                return new Temperature( ((myDegrees * (9.0/5.0)) + 32.0), 'F');
            case 'K':
            case 'k':
                return new Temperature( (((myDegrees - 273.15) * (9.0/5.0)) + 32.0), 'F' );
            default:
                // Invalid temperature scale
                System.out.println("Could not convert to F");
                return this;
        }
    }

    /* 
    Celsius conversion
    Converty any temperature scale into Celsius. 
    Returns: A new Temperature object with the myScale
            changed to the correct scale and myDegree
            updated to the correct value for that scale
    */
    public Temperature toCelsius() {
        switch(myScale) {
            case 'F':
            case 'f':
                return new Temperature( (myDegrees - 32.0) * (5.0/9.0), 'C');
            case 'C':
            case 'c':
                return this;
            case 'K':
            case 'k':
                return new Temperature((myDegrees - 273.15), 'C');
            default:
                // Invalid temperature scale
                System.out.println("Could not convert to C");
                return this;
        }
    }

    /* 
    Kelvin conversion
    Converty any temperature scale into Kelvin. 
    Returns: A new Temperature object with the myScale
            changed to the correct scale and myDegree
            updated to the correct value for that scale
    */
    public Temperature toKelvin() {
        switch(myScale) {
            case 'F':
            case 'f':
                return new Temperature( (((myDegrees - 32.0)) * (5.0/9.0) + 273.15), 'K');
            case 'C':
            case 'c':
                return new Temperature( (myDegrees + 273.15), 'K');
            case 'K':
            case 'k':
                return this;
            default:
                // Invalid temperature scale
                System.out.println("Could not convert to K");
                return this;
        }
    }

    /*
    Ability to set the values of myDegree and myScale with a string input
    In: String input: the string containing the desired temperature and scale
    Precondition: input must be in the format <valid numbers> <valid scale>
                and must be valid for a Temperature object
    Postcondition: The values of myDegree and myScale will be updated with the input values
    */
    public void enterTemperature(String input) {
        // Strip away nasty white space
        char[] inputCharArray = input.toCharArray();

        // Set the scale to the last character entered
        char scale = inputCharArray[input.length() - 1];

        // Set the degrees to everthing before that (in hopes that it's a valid double)
        double degrees = Double.parseDouble( input.substring(0, input.length() - 1) );

        // Make sure the parsed values would make a valid temperature and set 
        //      myDegree and myScale
        if(isValidTemperature(degrees, scale)) {
            myDegrees = degrees;
            myScale = scale;
        }
        else {
            System.out.println("Invalid temperature");
        }
    }

    /*
    Convert a temperature object to a string to be displayed (in a table)
    Returns: A string containing the value of myDegrees rounded to 2 decimal places
            followed by the letter corresponding to the scale
    */
    public String toString() {
        return String.format(("%.2f " + String.valueOf(myScale)), myDegrees);
    }

    /*
    For testing if two Temperature objects have equal temperature (regardless of scale)
    In: Temperature temp: The Temperature object to compare to this.
    Precondition: Both temp and this must be valid temperature objects.
    Returns: a boolean indicating whether or not the two temperatures are equal.
    */
    public boolean equals(Temperature temp) {
        switch(myScale) {
            case 'F':
            case 'f':
                if(temp.toFahrenheit().getDegrees() == myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            case 'K':
            case 'k':
                if(temp.toKelvin().getDegrees() == myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            case 'C':
            case 'c':
                if(temp.toCelsius().getDegrees() == myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            default:
                return false;
        }
    }

    /*
    For testing if this Temperature object's degree is less than another
    In: Temperature temp: The Temperature object to compare to this.
    Precondition: Both temp and this must be valid temperature objects.
    Returns: a boolean indicating whether or not temp's degree is less than this's degree.
    */
    public boolean lessThan(Temperature temp) {
        switch(myScale) {
            case 'F':
            case 'f':
                if(temp.toFahrenheit().getDegrees() > myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            case 'K':
            case 'k':
                if(temp.toKelvin().getDegrees() > myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            case 'C':
            case 'c':
                if(temp.toCelsius().getDegrees() > myDegrees) {
                    return true;
                }
                else {
                    return false;
                }
            default:
                return false;
        }
    }
}
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ cat TemperatureTable.java
/* TempeartureTable.java implements the Temperature
* class for use in making a temperature table
* Student: Duncan Van Keulen
* Date: 4/9/2020
*************************************************/
import java.util.Scanner;

public class TemperatureTable {
    public static void main(String[] args) {
        
        Scanner keyboard = new Scanner(System.in);
        
        Temperature baseTemp = new Temperature();
        Temperature limitTemp = new Temperature();
        double stepValue;

        // Have the user enter...
        // The starting temperature
        System.out.println("Input the starting temperature: ");
        baseTemp.enterTemperature(keyboard.nextLine());
        
        // The limit temperature
        System.out.println("Input the limit temperature: ");
        limitTemp.enterTemperature(keyboard.nextLine());

        // The step value
        System.out.println("Input the step value: ");
        stepValue = keyboard.nextDouble();

        // Run through and format the tables while the basetemp is less than the limit temp
        while(baseTemp.lessThan(limitTemp)) {
            System.out.printf("%s    %s    %s\n", 
                    baseTemp.toFahrenheit().toString(), 
                    baseTemp.toCelsius().toString(),
                    baseTemp.toKelvin().toString());
            
            // Raise the value of baseTemp's degree by the stepValue
            baseTemp = baseTemp.raise(baseTemp, stepValue);
        }
    }
}]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ javac -deprecation Temperature[K*.java
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ java TemperatureTable
Input the starting temperature: 
0 F
Input the limit temperature: 
200 C
Input the step value: 
2.5
0.00 F    -17.78 C    255.37 K
2.50 F    -16.39 C    256.76 K
5.00 F    -15.00 C    258.15 K
7.50 F    -13.61 C    259.54 K
10.00 F    -12.22 C    260.93 K
12.50 F    -10.83 C    262.32 K
15.00 F    -9.44 C    263.71 K
17.50 F    -8.06 C    265.09 K
20.00 F    -6.67 C    266.48 K
22.50 F    -5.28 C    267.87 K
25.00 F    -3.89 C    269.26 K
27.50 F    -2.50 C    270.65 K
30.00 F    -1.11 C    272.04 K
32.50 F    0.28 C    273.43 K
35.00 F    1.67 C    274.82 K
37.50 F    3.06 C    276.21 K
40.00 F    4.44 C    277.59 K
42.50 F    5.83 C    278.98 K
45.00 F    7.22 C    280.37 K
47.50 F    8.61 C    281.76 K
50.00 F    10.00 C    283.15 K
52.50 F    11.39 C    284.54 K
55.00 F    12.78 C    285.93 K
57.50 F    14.17 C    287.32 K
60.00 F    15.56 C    288.71 K
62.50 F    16.94 C    290.09 K
65.00 F    18.33 C    291.48 K
67.50 F    19.72 C    292.87 K
70.00 F    21.11 C    294.26 K
72.50 F    22.50 C    295.65 K
75.00 F    23.89 C    297.04 K
77.50 F    25.28 C    298.43 K
80.00 F    26.67 C    299.82 K
82.50 F    28.06 C    301.21 K
85.00 F    29.44 C    302.59 K
87.50 F    30.83 C    303.98 K
90.00 F    32.22 C    305.37 K
92.50 F    33.61 C    306.76 K
95.00 F    35.00 C    308.15 K
97.50 F    36.39 C    309.54 K
100.00 F    37.78 C    310.93 K
102.50 F    39.17 C    312.32 K
105.00 F    40.56 C    313.71 K
107.50 F    41.94 C    315.09 K
110.00 F    43.33 C    316.48 K
112.50 F    44.72 C    317.87 K
115.00 F    46.11 C    319.26 K
117.50 F    47.50 C    320.65 K
120.00 F    48.89 C    322.04 K
122.50 F    50.28 C    323.43 K
125.00 F    51.67 C    324.82 K
127.50 F    53.06 C    326.21 K
130.00 F    54.44 C    327.59 K
132.50 F    55.83 C    328.98 K
135.00 F    57.22 C    330.37 K
137.50 F    58.61 C    331.76 K
140.00 F    60.00 C    333.15 K
142.50 F    61.39 C    334.54 K
145.00 F    62.78 C    335.93 K
147.50 F    64.17 C    337.32 K
150.00 F    65.56 C    338.71 K
152.50 F    66.94 C    340.09 K
155.00 F    68.33 C    341.48 K
157.50 F    69.72 C    342.87 K
160.00 F    71.11 C    344.26 K
162.50 F    72.50 C    345.65 K
165.00 F    73.89 C    347.04 K
167.50 F    75.28 C    348.43 K
170.00 F    76.67 C    349.82 K
172.50 F    78.06 C    351.21 K
175.00 F    79.44 C    352.59 K
177.50 F    80.83 C    353.98 K
180.00 F    82.22 C    355.37 K
182.50 F    83.61 C    356.76 K
185.00 F    85.00 C    358.15 K
187.50 F    86.39 C    359.54 K
190.00 F    87.78 C    360.93 K
192.50 F    89.17 C    362.32 K
195.00 F    90.56 C    363.71 K
197.50 F    91.94 C    365.09 K
200.00 F    93.33 C    366.48 K
202.50 F    94.72 C    367.87 K
205.00 F    96.11 C    369.26 K
207.50 F    97.50 C    370.65 K
210.00 F    98.89 C    372.04 K
212.50 F    100.28 C    373.43 K
215.00 F    101.67 C    374.82 K
217.50 F    103.06 C    376.21 K
220.00 F    104.44 C    377.59 K
222.50 F    105.83 C    378.98 K
225.00 F    107.22 C    380.37 K
227.50 F    108.61 C    381.76 K
230.00 F    110.00 C    383.15 K
232.50 F    111.39 C    384.54 K
235.00 F    112.78 C    385.93 K
237.50 F    114.17 C    387.32 K
240.00 F    115.56 C    388.71 K
242.50 F    116.94 C    390.09 K
245.00 F    118.33 C    391.48 K
247.50 F    119.72 C    392.87 K
250.00 F    121.11 C    394.26 K
252.50 F    122.50 C    395.65 K
255.00 F    123.89 C    397.04 K
257.50 F    125.28 C    398.43 K
260.00 F    126.67 C    399.82 K
262.50 F    128.06 C    401.21 K
265.00 F    129.44 C    402.59 K
267.50 F    130.83 C    403.98 K
270.00 F    132.22 C    405.37 K
272.50 F    133.61 C    406.76 K
275.00 F    135.00 C    408.15 K
277.50 F    136.39 C    409.54 K
280.00 F    137.78 C    410.93 K
282.50 F    139.17 C    412.32 K
285.00 F    140.56 C    413.71 K
287.50 F    141.94 C    415.09 K
290.00 F    143.33 C    416.48 K
292.50 F    144.72 C    417.87 K
295.00 F    146.11 C    419.26 K
297.50 F    147.50 C    420.65 K
300.00 F    148.89 C    422.04 K
302.50 F    150.28 C    423.43 K
305.00 F    151.67 C    424.82 K
307.50 F    153.06 C    426.21 K
310.00 F    154.44 C    427.59 K
312.50 F    155.83 C    428.98 K
315.00 F    157.22 C    430.37 K
317.50 F    158.61 C    431.76 K
320.00 F    160.00 C    433.15 K
322.50 F    161.39 C    434.54 K
325.00 F    162.78 C    435.93 K
327.50 F    164.17 C    437.32 K
330.00 F    165.56 C    438.71 K
332.50 F    166.94 C    440.09 K
335.00 F    168.33 C    441.48 K
337.50 F    169.72 C    442.87 K
340.00 F    171.11 C    444.26 K
342.50 F    172.50 C    445.65 K
345.00 F    173.89 C    447.04 K
347.50 F    175.28 C    448.43 K
350.00 F    176.67 C    449.82 K
352.50 F    178.06 C    451.21 K
355.00 F    179.44 C    452.59 K
357.50 F    180.83 C    453.98 K
360.00 F    182.22 C    455.37 K
362.50 F    183.61 C    456.76 K
365.00 F    185.00 C    458.15 K
367.50 F    186.39 C    459.54 K
370.00 F    187.78 C    460.93 K
372.50 F    189.17 C    462.32 K
375.00 F    190.56 C    463.71 K
377.50 F    191.94 C    465.09 K
380.00 F    193.33 C    466.48 K
382.50 F    194.72 C    467.87 K
385.00 F    196.11 C    469.26 K
387.50 F    197.50 C    470.65 K
390.00 F    198.89 C    472.04 K
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ java TemperatureTable
Input the starting temperature: 
0 K
Input the limit temperature: 
212 F
Input the step value: 
20.0
-459.67 F    -273.15 C    0.00 K
-423.67 F    -253.15 C    20.00 K
-387.67 F    -233.15 C    40.00 K
-351.67 F    -213.15 C    60.00 K
-315.67 F    -193.15 C    80.00 K
-279.67 F    -173.15 C    100.00 K
-243.67 F    -153.15 C    120.00 K
-207.67 F    -133.15 C    140.00 K
-171.67 F    -113.15 C    160.00 K
-135.67 F    -93.15 C    180.00 K
-99.67 F    -73.15 C    200.00 K
-63.67 F    -53.15 C    220.00 K
-27.67 F    -33.15 C    240.00 K
8.33 F    -13.15 C    260.00 K
44.33 F    6.85 C    280.00 K
80.33 F    26.85 C    300.00 K
116.33 F    46.85 C    320.00 K
152.33 F    66.85 C    340.00 K
188.33 F    86.85 C    360.00 K
]0;djv78@gold06: ~/CS214Work/214/projects/08/java[01;32mdjv78@gold06[00m:[01;34m~/CS214Work/214/projects/08/java[00m$ exit

Script done on 2020-04-09 22:21:30-0400
Script started on 2020-04-12 18:48:47-0400
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ cat temperature_P[Kpackage.adb[Ks
-- temperature.ads declares the Temperature type and its operations.
--
-- By: Duncan Van Keulen
-- Date: 4/9/2020
--------------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

package Temperature_Package is

    type Temperature is private;

    procedure enterTemperature(Tmp : in out Temperature);

    procedure display(Tmp : in Temperature);

    procedure Init(Tmp : out Temperature; Degree : in Float; Scale : in character);

    procedure raiseTemperature(temp : in Temperature; degrees : in Float; temp2 : out Temperature);
    
    procedure lowerTemperature(temp : in Temperature; degrees : in Float; temp2 : out Temperature);

    function isValidTemperature(Degree : in Float; Scale : in character) return boolean;

    function getScale(Tmp : in Temperature) return character;

    function getDegree(Tmp : in Temperature) return Float;

    function toFahrenheit(Tmp : in Temperature) return Temperature;

    function toCelsius(Tmp : in Temperature) return Temperature;

    function toKelvin(Tmp : in Temperature) return Temperature;

    function equals(temp1 : in Temperature; temp2 : in Temperature) return boolean;

    function lessThan(temp1 : in Temperature; temp2 : in Temperature) return boolean;

    private

    type Temperature is
        record
            myDegree : Float;
            myScale : character;
        end record;

end Temperature_Package;

]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ cat temperature_package.adb
-- temperature.adb defines operations for the Temperature type.
--
-- By: Duncan Van Keulen
-- Date: 4/9/2020
---------------------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;

package body Temperature_Package is

    ----------------------------------------------
    -- Init initializes a temperature record
    -- Receive: Scale : character - the scale of the temperature
    -- Recieve: Degree : Float - the degrees in that scale
    -- Post: Tmp's myDegree and myScale values will be initialized
    ----------------------------------------------
    procedure Init(Tmp : out Temperature; Degree : in Float; Scale : in character) is
    begin
        if isValidTemperature(Degree, Scale) then
            Tmp.MyDegree := Degree;
            Tmp.MyScale := Scale;
        else
            Put("Invalid temperature values");
        end if;
    end Init;

    ----------------------------------------------
    -- isValidTemperature determines if a Degree and Scale
    --      will constitute a valid temperature
    -- Receive: Degree : Float - the desired degree of the temperature
    -- Receive: Scale : character - the desired scale of the temperature
    -- Return: A boolean indicating whether the desired temperature is valid
    ----------------------------------------------

    function isValidTemperature(Degree : in Float; Scale : in character) return boolean is
    begin
        case(Scale) is
            -- If the scale is F
            when 'F' | 'f' =>   if Degree >= -460.0 then return true; 
                                else return false; end if;
            -- If the scale is C
            when 'C' | 'c' =>   if Degree >= -273.15 then return true; 
                                else return false; end if;
            -- If the scale is K
            when 'K' | 'k' =>   if Degree >= 0.0 then 
                                return true; else return false; end if;

            when others => return false;
        end case;

        return false;

    end isValidTemperature;

    ----------------------------------------------
    -- getScale is an accessor for a temperature's scale
    -- Receive: Tmp : Temperature - the temperature to retrive scale from
    -- PRE: Tmp must be initialized
    -- Return: a character - the scale of the temperature
    ----------------------------------------------
    
    function getScale(Tmp : in Temperature) return character is
    begin
        return Tmp.myScale;
    end getScale;

    ----------------------------------------------
    -- getDegree is an accessor for a temperature's degree
    -- Receive: Tmp : Temperature - the temperature to retrive degree from
    -- PRE: Tmp must be initialized
    -- Return: a Float - the degree of the temperature
    ----------------------------------------------
    
    function getDegree(Tmp : in Temperature) return Float is
    begin
        return Tmp.myDegree;
    end getDegree;

    ----------------------------------------------
    -- raiseTemperature raises a temperature by an amount in degrees
    -- Receive: temp : Temperature - the temperature to raise
    -- Recieve: temp2 : Temperature - the out temperature that will have the raised values
    -- Recieve: degrees : Float - the number of degrees to raise the temperature by
    -- PRE: both temperature objects must be initialized
    -- PRE: raising must constitute a valid temperature object
    -- POST: temp2 will have degree of temp1 + degrees
    ----------------------------------------------

    procedure raiseTemperature(temp : in Temperature; degrees : in Float; temp2 : out Temperature) is
    begin
        if isValidTemperature(getDegree(temp) + degrees, getScale(temp)) then 
            Init(temp2, getDegree(temp) + degrees, getScale(temp)); 
        else
            Put("Couldn't raise temperature");
            Init(temp2, getDegree(temp), getScale(temp));
        end if;
    end raiseTemperature;

    ----------------------------------------------
    -- lowerTemperature lowers a temperature by an amount in degrees
    -- Receive: temp : Temperature - the temperature to lower
    -- Recieve: temp2 : Temperature - the out temperature that will have the lowered values
    -- Recieve: degrees : Float - the number of degrees to lower the temperature by
    -- PRE: both temperature objects must be initialized
    -- PRE: raising must constitute a valid temperature object
    -- POST: temp2 will have degree of temp1 - degrees
    ----------------------------------------------
    
    procedure lowerTemperature(temp : in Temperature; degrees : in Float; temp2 : out Temperature) is
    begin
        if isValidTemperature(getDegree(temp) - degrees, getScale(temp)) then 
            Init(temp2, getDegree(temp) - degrees, getScale(temp)); 
        else
            Put("Couldn't raise temperature");
            Init(temp2, getDegree(temp), getScale(temp));
        end if;
    end lowerTemperature;

    ----------------------------------------------
    -- toFahrenheit converts a temperature to the Fahrenheit scale
    -- Receive: Tmp : Temperature
    -- PRE: Tmp must be initialized
    -- Return: A new Temperature with degree and scale changed to Fahrenheit
    ----------------------------------------------
    
    function toFahrenheit(Tmp : in Temperature) return Temperature is
    newTemp : Temperature;
    begin
        case(getScale(Tmp)) is
            when 'F' | 'f' => 
                return Tmp;
            when 'C' | 'c' => 
                Init(newTemp, ((getDegree(Tmp) * (9.0/5.0)) + 32.0), 'F');
                return newTemp;
            when 'K' | 'k' => 
                Init(newTemp, (((getDegree(Tmp) - 273.15) * (9.0/5.0)) + 32.0), 'F');
                return newTemp;
            when others =>
                return Tmp;
            Put("Could not convert to F");
        end case;
        -- to stop it complaining about missing return
        return Tmp;
    end toFahrenheit;

    ----------------------------------------------
    -- toCelsius converts a temperature to the Celsius scale
    -- Receive: Tmp : Temperature
    -- PRE: Tmp must be initialized
    -- Return: A new Temperature with degree and scale changed to Celsius
    ----------------------------------------------
    
    function toCelsius(Tmp : in Temperature) return Temperature is
    newTemp : Temperature;
    begin
        case(getScale(Tmp)) is
            when 'F' | 'f' => 
                Init(newTemp, (getDegree(Tmp) - 32.0) * (5.0/9.0), 'C' );
                return newTemp;
            when 'C' | 'c' => 
                return Tmp;
            when 'K' | 'k' =>
                Init(newTemp, (getDegree(Tmp) - 273.15), 'C' );
                return newTemp;
            when others => return Tmp;
            Put("Could not convert to C");
        end case;
        -- to stop it complaining about missing return
        return Tmp;
    end toCelsius;

    ----------------------------------------------
    -- toKelvin converts a temperature to the Kelvin scale
    -- Receive: Tmp : Temperature
    -- PRE: Tmp must be initialized
    -- Return: A new Temperature with degree and scale changed to Kelvin
    ----------------------------------------------
    
    function toKelvin(Tmp : in Temperature) return Temperature is
        newTemp : Temperature;
    begin
        case(getScale(Tmp)) is
            when 'F' | 'f' => 
                Init(newTemp, ((getDegree(Tmp) - 32.0) * (5.0/9.0) + 273.15), 'K');
                return newTemp;
            when 'C' | 'c' => 
                Init(newTemp, (getDegree(Tmp) + 273.15), 'K');
                return newTemp;
            when 'K' | 'k' => 
                return Tmp;
            when others => return Tmp;
            Put("Could not convert to K");
        end case; 
        -- to stop it complaining about missing return
        return Tmp;
    end toKelvin;

    ----------------------------------------------
    -- enterTemperature grabs values from the user and initializes 
    --      a new Temeprature object based on those values
    -- Receive: Tmp : temperature
    -- PRE: Temperature should be initialized
    -- PRE: Entered values must be in the format "#'s F|C|K"
    -- POST: Tmp will be initialized with the user entered temperature values
    ----------------------------------------------
    
    procedure enterTemperature(Tmp : in out Temperature) is
    SPACE : String := " ";
    degree : Float;
    scale : character;
    begin
        Get(degree);
        Get(SPACE);
        get(scale);
        if isValidTemperature(degree, scale) then
            Init(Tmp, degree, scale);
        else 
            Put("Invalid values provided");
        end if;
    end enterTemperature;

    ----------------------------------------------
    -- display allows a temeprature object to be displayed to the terminal
    -- Receive: Tmp : Temperature - the temperature object to display
    -- PRE: Tmp must be initialized
    -- POST: Tmps degree and scale will be Put to the terminal
    ----------------------------------------------
    
    procedure display(Tmp : in Temperature) is
    begin
        Put(getDegree(Tmp), 10, 5, 0);
        Put(" ");
        Put(getScale(Tmp));
    end display;

    ----------------------------------------------
    -- equals allows checking if two Temperatures are equal, regardless of scale
    -- Receive: temp1 : Temperature - the lhs temperature
    -- Recieve: temp2 : Temperature - the rhs temperature
    -- PRE: temp1 and temp2 must be initialized
    -- Return: a boolean indicating whether or not temp1 = temp2
    ----------------------------------------------
    
    function equals(temp1 : in Temperature; temp2 : in Temperature) return boolean is
    begin
        case(getScale(temp1)) is
            when 'F' | 'f' => 
            if getDegree(toFahrenheit(temp1)) = getDegree(toFahrenheit(temp2)) then
                return true;
            else
                return false;
            end if;

            when 'K' | 'k' => 
            if getDegree(toKelvin(temp1)) = getDegree(toKelvin(temp2)) then
                return true;
            else
                return false;
            end if;

            when 'C' | 'c' => 
            if getDegree(toCelsius(temp1)) = getDegree(toCelsius(temp2)) then
                return true;
            else
                return false;
            end if;
            when others => return false;
        end case;
        -- to stop it complaining about missing return
        return false;
    end equals;

    ----------------------------------------------
    -- lessThan allows checking if one Temperature is less than another, regardless of scale
    -- Receive: temp1 : Temperature - the lhs temperature
    -- Recieve: temp2 : Temperature - the rhs temperature
    -- PRE: temp1 and temp2 must be initialized
    -- Return: a boolean indicating whether or not temp1 = temp2
    ----------------------------------------------
    
    function lessThan(temp1 : in Temperature; temp2 : in Temperature) return boolean is
    begin
        case(getScale(temp1)) is
            when 'F' | 'f' => 
            if getDegree(toFahrenheit(temp1)) < getDegree(toFahrenheit(temp2)) then
                return true;
            else
                return false;
            end if;

            when 'K' | 'k' => 
            if getDegree(toKelvin(temp1)) < getDegree(toKelvin(temp2)) then
                return true;
            else
                return false;
            end if;

            when 'C' | 'c' => 
            if getDegree(toCelsius(temp1)) < getDegree(toCelsius(temp2)) then
                return true;
            else
                return false;
            end if;
            when others => return false;
        end case;
    end lessThan;

end Temperature_Package;]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ cat temperature_table.adb
-- name_package.adb defines operations for the Name type.
--
-- Completed by: Duncan Van Keulen
-- Date: 4/9/2020
---------------------------------------------------------

with Temperature_Package; use Temperature_Package;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;

procedure temperature_table is

    baseTemp, limitTemp, stepTemp : Temperature_Package.Temperature;
--    baseString, limitString : String := "100 C";
    stepValue : Float;

begin

    -- Input the temperatures
    Put("[Base] Enter degrees and scale: ");
    enterTemperature(baseTemp);
    New_Line;

    Put("[Limit] Enter degrees and scale: ");
    enterTemperature(limitTemp);
    New_Line;
    
    Put("[Step] Enter the step value: ");
    Get(stepValue);
    New_Line;

    -- Initialize the stepper temp to the base temp
    Init(stepTemp, getDegree(baseTemp), getScale(baseTemp));

    -- Header
    Put("         ");
    Put("Fahrenheit");
    Put("         ");
    Put("Celsius");
    Put("         ");
    Put("Kelvin");
    Put("         ");
    New_Line;

    while(lessThan(stepTemp, limitTemp))
    loop

        display(toFahrenheit(stepTemp));
        display(toCelsius(stepTemp));
        display(toKelvin(stepTemp));
        New_Line;
    
        raiseTemperature(stepTemp, stepValue, stepTemp);

    end loop;


end temperature_table;
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ make
gcc -c -gnata temperature_package.adb
gnatbind temperature_table.ali
gnatlink temperature_table.ali
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ make
make: 'temperature_table' is up to date.
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ ./temperature_table 
[Base] Enter degrees and scale: 0 F

[Limit] Enter degrees and scale: 100 C

[Step] Enter the step value: 2.5

         Fahrenheit         Celsius         Kelvin         
         0.00000 F       -17.77778 C       255.37222 K
         2.50000 F       -16.38889 C       256.76111 K
         5.00000 F       -15.00000 C       258.14999 K
         7.50000 F       -13.61111 C       259.53888 K
        10.00000 F       -12.22222 C       260.92776 K
        12.50000 F       -10.83333 C       262.31665 K
        15.00000 F        -9.44444 C       263.70554 K
        17.50000 F        -8.05556 C       265.09445 K
        20.00000 F        -6.66667 C       266.48334 K
        22.50000 F        -5.27778 C       267.87222 K
        25.00000 F        -3.88889 C       269.26111 K
        27.50000 F        -2.50000 C       270.64999 K
        30.00000 F        -1.11111 C       272.03888 K
        32.50000 F         0.27778 C       273.42776 K
        35.00000 F         1.66667 C       274.81665 K
        37.50000 F         3.05556 C       276.20554 K
        40.00000 F         4.44444 C       277.59445 K
        42.50000 F         5.83333 C       278.98334 K
        45.00000 F         7.22222 C       280.37222 K
        47.50000 F         8.61111 C       281.76111 K
        50.00000 F        10.00000 C       283.14999 K
        52.50000 F        11.38889 C       284.53888 K
        55.00000 F        12.77778 C       285.92776 K
        57.50000 F        14.16667 C       287.31665 K
        60.00000 F        15.55556 C       288.70554 K
        62.50000 F        16.94444 C       290.09445 K
        65.00000 F        18.33333 C       291.48334 K
        67.50000 F        19.72222 C       292.87222 K
        70.00000 F        21.11111 C       294.26111 K
        72.50000 F        22.50000 C       295.64999 K
        75.00000 F        23.88889 C       297.03888 K
        77.50000 F        25.27778 C       298.42776 K
        80.00000 F        26.66667 C       299.81665 K
        82.50000 F        28.05556 C       301.20557 K
        85.00000 F        29.44445 C       302.59445 K
        87.50000 F        30.83333 C       303.98334 K
        90.00000 F        32.22223 C       305.37222 K
        92.50000 F        33.61111 C       306.76111 K
        95.00000 F        35.00000 C       308.14999 K
        97.50000 F        36.38889 C       309.53888 K
       100.00000 F        37.77778 C       310.92776 K
       102.50000 F        39.16667 C       312.31665 K
       105.00000 F        40.55556 C       313.70557 K
       107.50000 F        41.94445 C       315.09445 K
       110.00000 F        43.33334 C       316.48334 K
       112.50000 F        44.72223 C       317.87222 K
       115.00000 F        46.11111 C       319.26111 K
       117.50000 F        47.50000 C       320.64999 K
       120.00000 F        48.88889 C       322.03888 K
       122.50000 F        50.27778 C       323.42776 K
       125.00000 F        51.66667 C       324.81665 K
       127.50000 F        53.05556 C       326.20557 K
       130.00000 F        54.44445 C       327.59445 K
       132.50000 F        55.83334 C       328.98334 K
       135.00000 F        57.22223 C       330.37222 K
       137.50000 F        58.61111 C       331.76111 K
       140.00000 F        60.00000 C       333.14999 K
       142.50000 F        61.38889 C       334.53888 K
       145.00000 F        62.77778 C       335.92776 K
       147.50000 F        64.16667 C       337.31665 K
       150.00000 F        65.55556 C       338.70557 K
       152.50000 F        66.94445 C       340.09445 K
       155.00000 F        68.33334 C       341.48334 K
       157.50000 F        69.72223 C       342.87222 K
       160.00000 F        71.11111 C       344.26111 K
       162.50000 F        72.50000 C       345.64999 K
       165.00000 F        73.88889 C       347.03888 K
       167.50000 F        75.27778 C       348.42776 K
       170.00000 F        76.66667 C       349.81665 K
       172.50000 F        78.05556 C       351.20557 K
       175.00000 F        79.44445 C       352.59445 K
       177.50000 F        80.83334 C       353.98334 K
       180.00000 F        82.22223 C       355.37222 K
       182.50000 F        83.61111 C       356.76111 K
       185.00000 F        85.00001 C       358.14999 K
       187.50000 F        86.38889 C       359.53888 K
       190.00000 F        87.77778 C       360.92776 K
       192.50000 F        89.16667 C       362.31665 K
       195.00000 F        90.55556 C       363.70557 K
       197.50000 F        91.94445 C       365.09445 K
       200.00000 F        93.33334 C       366.48334 K
       202.50000 F        94.72223 C       367.87222 K
       205.00000 F        96.11111 C       369.26111 K
       207.50000 F        97.50001 C       370.64999 K
       210.00000 F        98.88889 C       372.03888 K
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ ./temperature_table 
[Base] Enter degrees and scale: 0 K

[Limit] Enter degrees and scale: 212 F

[Step] Enter the step value: 20.0

         Fahrenheit         Celsius         Kelvin         
      -459.66998 F      -273.14999 C         0.00000 K
      -423.66998 F      -253.14999 C        20.00000 K
      -387.66998 F      -233.14999 C        40.00000 K
      -351.66998 F      -213.14999 C        60.00000 K
      -315.66998 F      -193.14999 C        80.00000 K
      -279.66998 F      -173.14999 C       100.00000 K
      -243.66998 F      -153.14999 C       120.00000 K
      -207.66998 F      -133.14999 C       140.00000 K
      -171.66998 F      -113.14999 C       160.00000 K
      -135.66998 F       -93.14999 C       180.00000 K
       -99.66998 F       -73.14999 C       200.00000 K
       -63.66998 F       -53.14999 C       220.00000 K
       -27.66999 F       -33.14999 C       240.00000 K
         8.33001 F       -13.14999 C       260.00000 K
        44.33001 F         6.85001 C       280.00000 K
        80.33001 F        26.85001 C       300.00000 K
       116.33001 F        46.85001 C       320.00000 K
       152.33002 F        66.85001 C       340.00000 K
       188.33000 F        86.85001 C       360.00000 K
]0;djv78@gold02: ~/CS214Work/214/projects/08/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/08/ada[00m$ exit

Script done on 2020-04-12 18:52:46-0400
Script started on 2020-04-13 16:52:24-0400
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ cat src/Temperature.clj
;; TemperatureTable.cljis a module for Temperautres
;;
;; Usage: clojure -m TemperatureTable
;;
;; Completed by: Duncan Van Keulen
;; Date: 4/12/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require '[clojure.string :as str]) ;; include the Temperature module

;; Define a Temperature record with degree and scale attributes
(defrecord Temperature [myDegree myScale])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Temperature constructs a Temperature from a float and a character 
;;; Receive: degree : the degree of the temperature
;;; Recieve: scale : the scale that that degree is in
;;; Return: the Temperature (degree scale)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Temperature [degree scale]
  (->Temperature degree scale)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getDegree returns the degree of the recieved temperature object
;;; Receive: temp : a temperature
;;; PRE: temp MUST be a temperature that's initialized
;;; Return: the myDegree attribute of that temp object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getDegree [^Temperature temp] 
  (:myDegree temp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getScale returns the scale of the recieved temperature object
;;; Receive: temp : a temperature
;;; PRE: temp MUST be a temperature that's initialized
;;; Return: the myScale attribute of that temp object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getScale [^Temperature temp]
  (:myScale temp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; isValidTemperature determines if a degree and scale would 
;;;     constitute a valid Temperature
;;; Receive: degree : the deree of the desired Temperature
;;; Recieve: scale : the scale of the desired Temperature
;;; Return: a boolean indicating whether or not the values provided
;;;     constitute a valid Temperature
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn isValidTemperature [degree scale] 
  (cond
    (= \F scale) (if (< degree -460.0) false true)
    (= \f scale) (if (< degree -460.0) false true)
    (= \C scale) (if (< degree -273.15) false true)
    (= \c scale) (if (< degree -273.15) false true)
    (= \K scale) (if (< degree 0.0) false true)
    (= \k scale) (if (< degree 0.0) false true)
    :else false
  )   
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toFahrenheit converts a temperature to Fahrenheit from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toFahrenheit [^Temperature temp]
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) temp ;; no conversion needed
    (= \f (getScale temp)) temp ;; no conversion needed

    ;; From Celsius
    (= \C (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (getDegree temp)) 32.0) \F)
    (= \c (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (getDegree temp)) 32.0) \F)

    ;; From Kelvin
    (= \K (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (- (getDegree temp) 273.15)) 32.0) \F)
    (= \k (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (- (getDegree temp) 273.15)) 32.0) \F)

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toCelsius converts a temperature to Celsius from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toCelsius [^Temperature temp]
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) (make-Temperature (* (/ 5.0 9.0) (- (getDegree temp) 32.0)) \C)
    (= \f (getScale temp)) (make-Temperature (* (/ 5.0 9.0) (- (getDegree temp) 32.0)) \C)

    ;; From Celsius
    (= \C (getScale temp)) temp ;; no conversion needed
    (= \c (getScale temp)) temp ;; no conversion needed

    ;; From Kelvin
    (= \K (getScale temp)) (make-Temperature (- (getDegree temp) 273.15) \C)
    (= \k (getScale temp)) (make-Temperature (- (getDegree temp) 273.15) \C)

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toKelvin converts a temperature to Kelvin from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toKelvin [^Temperature temp] 
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) (make-Temperature (+ (* (- (getDegree temp) 32.0) (/ 5.0 9.0)) 273.15) \K)
    (= \f (getScale temp)) (make-Temperature (+ (* (- (getDegree temp) 32.0) (/ 5.0 9.0)) 273.15) \K)

    ;; From Celsius
    (= \C (getScale temp)) (make-Temperature (+ (getDegree temp) 273.15) \K)
    (= \c (getScale temp)) (make-Temperature (+ (getDegree temp) 273.15) \K)

    ;; From Kelvin
    (= \K (getScale temp)) temp ;; no conversion needed
    (= \k (getScale temp)) temp ;; no conversion needed

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; enterTemperature allows a Temperature record's values to be 
;;;     entered by the user
;;; Recieve: degree and scale to be read in as input
;;; Precondition: the input degree and scale must consitute a
;;;     valid Temperature object
;;; Return: a new Temperature record with the user entered values
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn enterTemperature []
  (let 
    [
      input (read-line) ;; get the input from the user
      splicedInput (str/split input #" ")
      inputDegree (Float/parseFloat (first splicedInput))
      inputScale (get (second splicedInput) 0)
    ]
    (if (isValidTemperature inputDegree inputScale)
      (->Temperature inputDegree inputScale)
      (do (println "Couldn't enter temperature") (flush))
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; dispalyTemperature prints a Temperature record to the screen
;;; Receive: temp : a Temperature
;;; Precondition: temp MUST be an initialized Temperature record
;;; Postcondition: the Temperature will be conveniently formatted
;;;     and printed to the screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn displayTemperature [^Temperature temp]
  (print (format "%.5f"(getDegree temp)) " " (getScale temp))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; raiseTemperature raises a temperature's degree attribute by
;;;     the input degrees
;;; Receive: temp : a Temperature record
;;; Recieve: degree : a float - the desired degrees to raise by
;;; Precondition: temp MUST be an initialized Temperature record
;;; Precondition: raising by degrees must consitute a valid Temperature
;;; Return: a new temperature with updated degrees
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn raiseTemperature [^Temperature temp degree]
  (if (isValidTemperature (+ (getDegree temp) degree) (getScale temp)) 
    ;; True
    (make-Temperature (+ (getDegree temp) degree) (getScale temp))
    ;; False
    (do (print "Could not raise temperature") (flush))
  )  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lowerTemperature lowers a temperature's degree attribute by
;;;     the input degrees
;;; Receive: temp : a Temperature record
;;; Recieve: degree : a float - the desired degrees to lower by
;;; Precondition: temp MUST be an initialized Temperature record
;;; Precondition: raising by degrees must consitute a valid Temperature
;;; Return: a new temperature with updated degrees
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lowerTemperature [^Temperature temp degree]
  (if (isValidTemperature (- (getDegree temp) degree) (getScale temp)) 
    ;; True
    (make-Temperature (- (getDegree temp) degree) (getScale temp))
    ;; False
    (do (print "Could not lower temperature") (flush))
  )  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; equals allows checking if two Temperatures are equal regardless of scale
;;; Receive: temp1 : Temperature - the lhs of the = operation
;;; Recieve: temp2 : Temprature - the rhs of the = operation
;;; Precondition: temp1 & temp2 MUST be initialized Temperature records
;;; Return: a boolean indicating whether or not the temperatures are equal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn equals [^Temperature temp1 ^Temperature temp2]
  (if (= (getDegree (toFahrenheit temp1)) (getDegree (toFahrenheit temp2)))
    ;; True-Section
      true ;; return true
    ;; False-Section
      false ;; return false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lessThan allows checking if one Temperature is less than another regardless of scale
;;; Receive: temp1 : Temperature - the lhs of the < operation
;;; Recieve: temp2 : Temprature - the rhs of the < operation
;;; Precondition: temp1 & temp2 MUST be initialized Temperature records
;;; Return: a boolean indicating if temp1 < temp2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lessThan [^Temperature temp1 ^Temperature temp2]
  (if (< (getDegree (toFahrenheit temp1)) (getDegree (toFahrenheit temp2)))
    ;; True-Section
      true ;; return true
    ;; False-Section
      false ;; return false
  )
)
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ cat src/TemperatureTable.clj
;; TemperatureTable.clj tests a Clojure Temperature type,
;;
;; Usage: clojure -m TemperatureTable
;;
;; Completed by: Duncan Van Keulen
;; Date: 4/12/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns TemperatureTable)

;; Load the Temperature module
(load-file "src/Temperature.clj")

(defn -main [] 
	;; Get the baseTemp from the user
	(print "Enter the base temperature: ") (flush)
	(let [ baseTemp (enterTemperature) ]

		;; Get the limitTemp from the user
		(print "Enter the limit temperature: ") (flush)
		(let [ limitTemp (enterTemperature) ]

			;; Get the stepValue from the user
			(print "Enter the step value: ") (flush)
			(let [ stepValue (read) ]
				(newline) (println "Fahrenheit              Celsius                 Kelvin") (newline)
				
				(loop [stepTemp baseTemp]
					;; Loop while the baseTemp is less than or equal to the limitTemp
					(when (lessThan stepTemp limitTemp) 

						;; Display table
						(displayTemperature (toFahrenheit stepTemp))
						(print "		")
						(displayTemperature (toCelsius stepTemp))
						(print "		")
						(displayTemperature (toKelvin stepTemp))
						(newline) (flush)

						;; Recurse with the temperature raised in the base scale
						(recur (raiseTemperature stepTemp stepValue))
					);; end when
					
				);; end loop
				
			);; end inner let
		)
	)
)
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ clojure -m TemperatureTable
Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5

Fahrenheit              Celsius                 Kelvin

0.00000   F		-17.77778   C		255.37222   K
2.50000   F		-16.38889   C		256.76111   K
5.00000   F		-15.00000   C		258.15000   K
7.50000   F		-13.61111   C		259.53889   K
10.00000   F		-12.22222   C		260.92778   K
12.50000   F		-10.83333   C		262.31667   K
15.00000   F		-9.44444   C		263.70556   K
17.50000   F		-8.05556   C		265.09444   K
20.00000   F		-6.66667   C		266.48333   K
22.50000   F		-5.27778   C		267.87222   K
25.00000   F		-3.88889   C		269.26111   K
27.50000   F		-2.50000   C		270.65000   K
30.00000   F		-1.11111   C		272.03889   K
32.50000   F		0.27778   C		273.42778   K
35.00000   F		1.66667   C		274.81667   K
37.50000   F		3.05556   C		276.20556   K
40.00000   F		4.44444   C		277.59444   K
42.50000   F		5.83333   C		278.98333   K
45.00000   F		7.22222   C		280.37222   K
47.50000   F		8.61111   C		281.76111   K
50.00000   F		10.00000   C		283.15000   K
52.50000   F		11.38889   C		284.53889   K
55.00000   F		12.77778   C		285.92778   K
57.50000   F		14.16667   C		287.31667   K
60.00000   F		15.55556   C		288.70556   K
62.50000   F		16.94444   C		290.09444   K
65.00000   F		18.33333   C		291.48333   K
67.50000   F		19.72222   C		292.87222   K
70.00000   F		21.11111   C		294.26111   K
72.50000   F		22.50000   C		295.65000   K
75.00000   F		23.88889   C		297.03889   K
77.50000   F		25.27778   C		298.42778   K
80.00000   F		26.66667   C		299.81667   K
82.50000   F		28.05556   C		301.20556   K
85.00000   F		29.44444   C		302.59444   K
87.50000   F		30.83333   C		303.98333   K
90.00000   F		32.22222   C		305.37222   K
92.50000   F		33.61111   C		306.76111   K
95.00000   F		35.00000   C		308.15000   K
97.50000   F		36.38889   C		309.53889   K
100.00000   F		37.77778   C		310.92778   K
102.50000   F		39.16667   C		312.31667   K
105.00000   F		40.55556   C		313.70556   K
107.50000   F		41.94444   C		315.09444   K
110.00000   F		43.33333   C		316.48333   K
112.50000   F		44.72222   C		317.87222   K
115.00000   F		46.11111   C		319.26111   K
117.50000   F		47.50000   C		320.65000   K
120.00000   F		48.88889   C		322.03889   K
122.50000   F		50.27778   C		323.42778   K
125.00000   F		51.66667   C		324.81667   K
127.50000   F		53.05556   C		326.20556   K
130.00000   F		54.44444   C		327.59444   K
132.50000   F		55.83333   C		328.98333   K
135.00000   F		57.22222   C		330.37222   K
137.50000   F		58.61111   C		331.76111   K
140.00000   F		60.00000   C		333.15000   K
142.50000   F		61.38889   C		334.53889   K
145.00000   F		62.77778   C		335.92778   K
147.50000   F		64.16667   C		337.31667   K
150.00000   F		65.55556   C		338.70556   K
152.50000   F		66.94444   C		340.09444   K
155.00000   F		68.33333   C		341.48333   K
157.50000   F		69.72222   C		342.87222   K
160.00000   F		71.11111   C		344.26111   K
162.50000   F		72.50000   C		345.65000   K
165.00000   F		73.88889   C		347.03889   K
167.50000   F		75.27778   C		348.42778   K
170.00000   F		76.66667   C		349.81667   K
172.50000   F		78.05556   C		351.20556   K
175.00000   F		79.44444   C		352.59444   K
177.50000   F		80.83333   C		353.98333   K
180.00000   F		82.22222   C		355.37222   K
182.50000   F		83.61111   C		356.76111   K
185.00000   F		85.00000   C		358.15000   K
187.50000   F		86.38889   C		359.53889   K
190.00000   F		87.77778   C		360.92778   K
192.50000   F		89.16667   C		362.31667   K
195.00000   F		90.55556   C		363.70556   K
197.50000   F		91.94444   C		365.09444   K
200.00000   F		93.33333   C		366.48333   K
202.50000   F		94.72222   C		367.87222   K
205.00000   F		96.11111   C		369.26111   K
207.50000   F		97.50000   C		370.65000   K
210.00000   F		98.88889   C		372.03889   K
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ clojure -m TemperatureTable
Enter the base temperature: o 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0

Fahrenheit              Celsius                 Kelvin

-459.67000   F		-273.15000   C		0.00000   K
-423.67000   F		-253.15000   C		20.00000   K
-387.67000   F		-233.15000   C		40.00000   K
-351.67000   F		-213.15000   C		60.00000   K
-315.67000   F		-193.15000   C		80.00000   K
-279.67000   F		-173.15000   C		100.00000   K
-243.67000   F		-153.15000   C		120.00000   K
-207.67000   F		-133.15000   C		140.00000   K
-171.67000   F		-113.15000   C		160.00000   K
-135.67000   F		-93.15000   C		180.00000   K
-99.67000   F		-73.15000   C		200.00000   K
-63.67000   F		-53.15000   C		220.00000   K
-27.67000   F		-33.15000   C		240.00000   K
8.33000   F		-13.15000   C		260.00000   K
44.33000   F		6.85000   C		280.00000   K
80.33000   F		26.85000   C		300.00000   K
116.33000   F		46.85000   C		320.00000   K
152.33000   F		66.85000   C		340.00000   K
188.33000   F		86.85000   C		360.00000   K
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ exit

Script done on 2020-04-13 16:54:17-0400
Script started on 2020-04-13 19:02:40-0400
]0;djv78@gold03: ~/CS214Work/214/projects/08/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/ruby[00m$ ruby Te[K[KtemperatureTable.rb 
Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5

Fahrenheit	Celsius		Kelvin
0.00000 F	-17.77778 C	255.37222 K	
2.50000 F	-16.38889 C	256.76111 K	
5.00000 F	-15.00000 C	258.15000 K	
7.50000 F	-13.61111 C	259.53889 K	
10.00000 F	-12.22222 C	260.92778 K	
12.50000 F	-10.83333 C	262.31667 K	
15.00000 F	-9.44444 C	263.70556 K	
17.50000 F	-8.05556 C	265.09444 K	
20.00000 F	-6.66667 C	266.48333 K	
22.50000 F	-5.27778 C	267.87222 K	
25.00000 F	-3.88889 C	269.26111 K	
27.50000 F	-2.50000 C	270.65000 K	
30.00000 F	-1.11111 C	272.03889 K	
32.50000 F	0.27778 C	273.42778 K	
35.00000 F	1.66667 C	274.81667 K	
37.50000 F	3.05556 C	276.20556 K	
40.00000 F	4.44444 C	277.59444 K	
42.50000 F	5.83333 C	278.98333 K	
45.00000 F	7.22222 C	280.37222 K	
47.50000 F	8.61111 C	281.76111 K	
50.00000 F	10.00000 C	283.15000 K	
52.50000 F	11.38889 C	284.53889 K	
55.00000 F	12.77778 C	285.92778 K	
57.50000 F	14.16667 C	287.31667 K	
60.00000 F	15.55556 C	288.70556 K	
62.50000 F	16.94444 C	290.09444 K	
65.00000 F	18.33333 C	291.48333 K	
67.50000 F	19.72222 C	292.87222 K	
70.00000 F	21.11111 C	294.26111 K	
72.50000 F	22.50000 C	295.65000 K	
75.00000 F	23.88889 C	297.03889 K	
77.50000 F	25.27778 C	298.42778 K	
80.00000 F	26.66667 C	299.81667 K	
82.50000 F	28.05556 C	301.20556 K	
85.00000 F	29.44444 C	302.59444 K	
87.50000 F	30.83333 C	303.98333 K	
90.00000 F	32.22222 C	305.37222 K	
92.50000 F	33.61111 C	306.76111 K	
95.00000 F	35.00000 C	308.15000 K	
97.50000 F	36.38889 C	309.53889 K	
100.00000 F	37.77778 C	310.92778 K	
102.50000 F	39.16667 C	312.31667 K	
105.00000 F	40.55556 C	313.70556 K	
107.50000 F	41.94444 C	315.09444 K	
110.00000 F	43.33333 C	316.48333 K	
112.50000 F	44.72222 C	317.87222 K	
115.00000 F	46.11111 C	319.26111 K	
117.50000 F	47.50000 C	320.65000 K	
120.00000 F	48.88889 C	322.03889 K	
122.50000 F	50.27778 C	323.42778 K	
125.00000 F	51.66667 C	324.81667 K	
127.50000 F	53.05556 C	326.20556 K	
130.00000 F	54.44444 C	327.59444 K	
132.50000 F	55.83333 C	328.98333 K	
135.00000 F	57.22222 C	330.37222 K	
137.50000 F	58.61111 C	331.76111 K	
140.00000 F	60.00000 C	333.15000 K	
142.50000 F	61.38889 C	334.53889 K	
145.00000 F	62.77778 C	335.92778 K	
147.50000 F	64.16667 C	337.31667 K	
150.00000 F	65.55556 C	338.70556 K	
152.50000 F	66.94444 C	340.09444 K	
155.00000 F	68.33333 C	341.48333 K	
157.50000 F	69.72222 C	342.87222 K	
160.00000 F	71.11111 C	344.26111 K	
162.50000 F	72.50000 C	345.65000 K	
165.00000 F	73.88889 C	347.03889 K	
167.50000 F	75.27778 C	348.42778 K	
170.00000 F	76.66667 C	349.81667 K	
172.50000 F	78.05556 C	351.20556 K	
175.00000 F	79.44444 C	352.59444 K	
177.50000 F	80.83333 C	353.98333 K	
180.00000 F	82.22222 C	355.37222 K	
182.50000 F	83.61111 C	356.76111 K	
185.00000 F	85.00000 C	358.15000 K	
187.50000 F	86.38889 C	359.53889 K	
190.00000 F	87.77778 C	360.92778 K	
192.50000 F	89.16667 C	362.31667 K	
195.00000 F	90.55556 C	363.70556 K	
197.50000 F	91.94444 C	365.09444 K	
200.00000 F	93.33333 C	366.48333 K	
202.50000 F	94.72222 C	367.87222 K	
205.00000 F	96.11111 C	369.26111 K	
207.50000 F	97.50000 C	370.65000 K	
210.00000 F	98.88889 C	372.03889 K	
]0;djv78@gold03: ~/CS214Work/214/projects/08/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/ruby[00m$ ruby temperatureTable.rb 
Enter the base temperature: 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0

Fahrenheit	Celsius		Kelvin
-459.67000 F	-273.15000 C	0.00000 K	
-423.67000 F	-253.15000 C	20.00000 K	
-387.67000 F	-233.15000 C	40.00000 K	
-351.67000 F	-213.15000 C	60.00000 K	
-315.67000 F	-193.15000 C	80.00000 K	
-279.67000 F	-173.15000 C	100.00000 K	
-243.67000 F	-153.15000 C	120.00000 K	
-207.67000 F	-133.15000 C	140.00000 K	
-171.67000 F	-113.15000 C	160.00000 K	
-135.67000 F	-93.15000 C	180.00000 K	
-99.67000 F	-73.15000 C	200.00000 K	
-63.67000 F	-53.15000 C	220.00000 K	
-27.67000 F	-33.15000 C	240.00000 K	
8.33000 F	-13.15000 C	260.00000 K	
44.33000 F	6.85000 C	280.00000 K	
80.33000 F	26.85000 C	300.00000 K	
116.33000 F	46.85000 C	320.00000 K	
152.33000 F	66.85000 C	340.00000 K	
188.33000 F	86.85000 C	360.00000 K	
]0;djv78@gold03: ~/CS214Work/214/projects/08/ruby[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/ruby[00m$ exit

Script done on 2020-04-13 19:03:23-0400
