Script started on 2020-04-28 10:56:00-0400
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ ls
ada.script        birds.adb         duck_package.o     goose_package.ads  kiwi_package.o       owl_package.adb      penguin_package.ali
bird_package.adb  birds.ali         flying_bird.adb    goose_package.ali  Makefile             owl_package.ads      penguin_package.o
bird_package.ads  birds.o           flying_bird.ads    goose_package.o    ostrich_package.adb  owl_package.ali      walking_bird.adb
bird_package.ali  duck_package.adb  flying_bird.ali    kiwi_package.adb   ostrich_package.ads  owl_package.o        walking_bird.ads
bird_package.o    duck_package.ads  flying_bird.o      kiwi_package.ads   ostrich_package.ali  penguin_package.adb  walking_bird.ali
[0m[01;32mbirds[0m             duck_package.ali  goose_package.adb  kiwi_package.ali   ostrich_package.o    penguin_package.ads  walking_bird.o
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ cat *.adb ; [K[K[K[Ks
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

package Bird_Package is

type Bird_Type is abstract tagged private;

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------

procedure Init(A_Bird : out Bird_Type; Name : in String);

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------

function  Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------

function  Call(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Movement                               -
 -- Abstract function - meant to be defined by      -
 --     subclasses                                  -
 ----------------------------------------------------

function Movement(A_Bird : in Bird_Type) return String is abstract;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------

function  Type_Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------

procedure Put(A_Bird : in Bird_Type'Class);

private

type Bird_Type is
    abstract tagged record
        My_Name : String(1..6);
    end record;

end Bird_Package;
-- duck_package.ads gives Duck-related declarations,
--  and derives Duck from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Duck_Package is

type Duck_Type is new Flying_Bird_Type with private;

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------

    function  Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
 
    function  Type_Name(A_Duck : in Duck_Type) return String;

 
private

    type Duck_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Duck_Package;
-- Flying_Bird.ads gives Flying_Bird related declarations
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Flying_Bird is

type Flying_Bird_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Flying_Bird's Movement                        -
 -- Receive: A_Flying_Bird, a Flying_Bird_Type      -
 -- Return: the movement of a flying bird (flying)  -
 ----------------------------------------------------

function Movement(A_Flying_Bird : in Flying_Bird_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Flying_Bird (Over-rides Bird.Type_Name())-
 -- Receive: A_Flying_Bird, a Flying_Bird_Type.                  -
 -- Return: "Flying_Bird".                                       -
 -----------------------------------------------------------

function  Type_Name(A_Flying_Bird : in Flying_Bird_Type) return String;

private

    type Flying_Bird_Type is new Bird_Type with
        record
            null;
        end record;

end Flying_Bird;-- goose_package.ads gives Goose-related declarations,
--  and derives Goose from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Goose_Package is

    type Goose_Type is new Flying_Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------

    function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------

    function  Type_Name(A_Goose : in Goose_Type) return String;

    private

    type Goose_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Goose_Package;
-- Kiwi_package.ads gives Kiwi-related declarations,
--  and derives Kiwi from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Kiwi_Package is

    type Kiwi_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: An_Kiwi, an Kiwi_Type.                 -
 -- Return: "Squee! Squee"                          -
 ----------------------------------------------------

function  Call(An_Kiwi : in Kiwi_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Kiwi                         -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Kiwi, an Kiwi_Type.                  -
 -- Return: "Kiwi".                                  -
 -----------------------------------------------------

    function  Type_Name(An_Kiwi : Kiwi_Type) return String;

    private
    
    type Kiwi_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Kiwi_Package;
-- Ostrich_package.ads gives Ostrich-related declarations,
--  and derives Ostrich from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Ostrich_Package is

    type Ostrich_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())       -
 -- Receive: An_Ostrich, an Ostrich_Type.           -
 -- Return: "Snork!"                                -
 ----------------------------------------------------

function  Call(An_Ostrich : in Ostrich_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Ostrich                      -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Ostrich, an Ostrich_Type.            -
 -- Return: "Ostrich".                               -
 -----------------------------------------------------

    function  Type_Name(An_Ostrich : Ostrich_Type) return String;

    private
    
    type Ostrich_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Ostrich_Package;
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Owl_Package is

    type Owl_Type is new Flying_Bird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------

function  Call(An_Owl : in Owl_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------

    function  Type_Name(An_Owl : Owl_Type) return String;

    private
    
    type Owl_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Owl_Package;
-- Penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Penguin_Package is

    type Penguin_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())       -
 -- Receive: An_Penguin, an Penguin_Type.           -
 -- Return: "Huh-huh-huh-huuuuh!                    -
 ----------------------------------------------------

function  Call(An_Penguin : in Penguin_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Penguin                      -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Penguin, an Penguin_Type.            -
 -- Return: "Penguin".                               -
 -----------------------------------------------------

    function  Type_Name(An_Penguin : Penguin_Type) return String;

    private
    
    type Penguin_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Penguin_Package;
-- walking_bird.ads gives Walking_Bird related declarations
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Walking_Bird is

type Walking_Bird_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Walking_Bird's Movement                       -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type    -
 -- Return: the movement of a walking bird (walking)-
 ----------------------------------------------------

function Movement(A_Walking_Bird : in Walking_Bird_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Walking_Bird (Over-rides Bird.Type_Name()) -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type.                  -
 -- Return: "Walking_Bird".                                        -
 -----------------------------------------------------------

function  Type_Name(A_Walking_Bird : in Walking_Bird_Type) return String;

private

    type Walking_Bird_Type is new Bird_Type with
        record
            null;
        end record;

end Walking_Bird;]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ cat *.adb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------

    procedure Init(A_Bird : out Bird_Type; Name : in String) is
    begin
        A_Bird.My_Name := Name;
    end Init;

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------

    function Name(A_Bird : in Bird_Type) return String is
    begin
        return A_Bird.My_Name;
    end Name;

-----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------

    function Call(A_Bird : in Bird_Type) return String is
    begin
        return "Squawwwwwwk!";
    end Call;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------

    function Type_Name(A_Bird : in Bird_Type) return String is
    begin
        return "Bird";
    end Type_Name;

 ---------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------

    procedure Put(A_Bird : in Bird_Type'Class) is
    begin
        Put( Name(A_Bird) );
        Put( ' ' );
        Put( Type_Name(A_Bird) );
        Put( " just ");
        Put( Movement(A_Bird) );
        Put( " and said ");
        Put( Call(A_Bird) );
    end Put; 

end Bird_Package;

-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
-----------------------------------------------------

with Bird_Package,
        Flying_Bird,
        Walking_Bird,
        Duck_Package,
        Goose_Package, 
        Owl_Package,
        Penguin_Package,
        Ostrich_Package,
        Kiwi_Package,
    Ada.Text_IO;
use Bird_Package,
        Flying_Bird,
        Walking_Bird,
        Duck_Package, 
        Goose_Package,
        Owl_Package,
        Penguin_Package,
        Ostrich_Package,
        Kiwi_Package,
    Ada.Text_IO;


procedure Birds is

Bird2 : Duck_Type;       -- derived class 1
Bird3 : Goose_Type;      -- derived class 2
Bird4 : Owl_Type;        -- derived class 3
Bird5 : Flying_Bird_Type;
Bird6 : Walking_Bird_Type;
Bird7 : Penguin_Type;
Bird8 : Ostrich_Type;
Bird9 : Kiwi_Type;

begin
New_Line;
Put("Welcome to the Bird Park!");
New_Line;

Init(Bird5, "Flyer ");
Put(Bird5); New_Line;

Init(Bird6, "Walker");
Put(Bird6); New_Line;

Init(Bird2, "Donald");
Put(Bird2); New_Line;

Init(Bird3, "Mother");
Put(Bird3); New_Line;

Init(Bird4, "Woodsy");
Put(Bird4); New_Line;

Init(Bird7, "Peter ");
Put(Bird7); New_Line;

Init(Bird8, "Oliver");
Put(Bird8); New_Line;

Init(Bird9, "Kathy ");
Put(Bird9); New_Line;

New_Line;
end Birds;

-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------

    function Call(A_Duck : in Duck_Type) return String is
    begin
        return "Quack!";
    end Call;

 -----------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------

    function Type_Name(A_Duck : in Duck_Type) return String is
    begin
        return "Duck";
    end Type_Name;

end Duck_Package;
-- Flying_Bird.adb defines Flying_Bird related methods
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Flying_Bird is

 ----------------------------------------------------
 -- A Flying_Bird's Movement                        -
 -- Receive: A_Flying_Bird, a Flying_Bird_Type      -
 -- Return: the movement of a flying bird (flying)  -
 ----------------------------------------------------

function Movement(A_Flying_Bird : in Flying_Bird_Type) return String is
begin
    return "flew past";
end Movement;

 ------------------------------------------------------------
 -- Determine type of a Flying_Bird (Over-rides Bird.Type_Name())-
 -- Receive: A_Flying_Bird, a Flying_Bird_Type.                  -
 -- Return: "Flying_Bird".                                       -
 -----------------------------------------------------------

function Type_Name(A_Flying_Bird : in Flying_Bird_Type) return String is
begin
    return "Flying Bird";
end Type_Name;

end Flying_Bird;-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------

    function Call(A_Goose : in Goose_Type) return String is
    begin
        return "Honk!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------

    function Type_Name(A_Goose : in Goose_Type) return String is
    begin
        return "Goose";
    end Type_Name;

end Goose_Package;
-- Kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: An_Kiwi, an Kiwi_Type.                 -
 -- Return: "Squee! Squee!"                         -
 ----------------------------------------------------

    function Call(An_Kiwi : in Kiwi_Type) return String is
    begin
        return "Squee! Squee!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Kiwi                         -
 -- Receive: An_Kiwi, an Kiwi_Type.                  -
 -- Return: "Kiwi".                                  -
 -----------------------------------------------------

    function Type_Name(An_Kiwi : in Kiwi_Type) return String is
    begin
        return "Kiwi";
    end Type_Name;

end Kiwi_Package;
-- Ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())       -
 -- Receive: An_Ostrich, an Ostrich_Type.           -
 -- Return: "Snork!"                   -
 ----------------------------------------------------

    function Call(An_Ostrich : in Ostrich_Type) return String is
    begin
        return "Snork!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Ostrich                      -
 -- Receive: An_Ostrich, an Ostrich_Type.            -
 -- Return: "Ostrich".                               -
 -----------------------------------------------------

    function Type_Name(An_Ostrich : in Ostrich_Type) return String is
    begin
        return "Ostrich";
    end Type_Name;

end Ostrich_Package;
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is


 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------

    function Call(An_Owl : in Owl_Type) return String is
    begin
        return "Whoo!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------

    function Type_Name(An_Owl : in Owl_Type) return String is
    begin
        return "Owl";
    end Type_Name;

end Owl_Package;
-- Penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())       -
 -- Receive: An_Penguin, an Penguin_Type.           -
 -- Return: "Huh-huh-huh-huuuuh!"                   -
 ----------------------------------------------------

    function Call(An_Penguin : in Penguin_Type) return String is
    begin
        return "Huh-huh-huh-huuuuh!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Penguin                      -
 -- Receive: An_Penguin, an Penguin_Type.            -
 -- Return: "Penguin".                               -
 -----------------------------------------------------

    function Type_Name(An_Penguin : in Penguin_Type) return String is
    begin
        return "Penguin";
    end Type_Name;

end Penguin_Package;
-- walking_bird.adb defines Walking_Bird related methods
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Walking_Bird is

 ----------------------------------------------------
 -- A Walking_Bird's Movement                       -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type    -
 -- Return: the movement of a walking bird (walking)-
 ----------------------------------------------------

function Movement(A_Walking_Bird : in Walking_Bird_Type) return String is
begin
    return "walked past";
end Movement;

 ------------------------------------------------------------
 -- Determine type of a Walking_Bird (Over-rides Bird.Type_Name()) -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type.                  -
 -- Return: "Walking_Bird".                                        -
 -----------------------------------------------------------

function  Type_Name(A_Walking_Bird : in Walking_Bird_Type) return String is
begin
    return "Walking Bird";
end Type_Name;

end Walking_Bird;]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ make
gcc -c  bird_package.adb
gcc -c  duck_package.adb
gcc -c  goose_package.adb
gcc -c  owl_package.adb
gcc -c  penguin_package.adb
gcc -c  ostrich_package.adb
gcc -c  kiwi_package.adb
gnatbind birds.ali
gnatlink birds.ali
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ ./birds

Welcome to the Bird Park!
Flyer  Flying Bird just flew past and said Squawwwwwwk!
Walker Walking Bird just walked past and said Squawwwwwwk!
Donald Duck just flew past and said Quack!
Mother Goose just flew past and said Honk!
Woodsy Owl just flew past and said Whoo!
Peter  Penguin just walked past and said Huh-huh-huh-huuuuh!
Oliver Ostrich just walked past and said Snork!
Kathy  Kiwi just walked past and said Squee! Squee!

]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ exit

Script done on 2020-04-28 10:56:48-0400
