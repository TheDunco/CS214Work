Script started on 2020-04-28 10:40:02-0400
]0;djv78@gold02: ~/CS214Work/214/projects/10/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/java[00m$ ls
Bird.class   Birds.java  FlyingBird.class  Goose.java   Kiwi.java      Ostrich.java  Penguin.class      WalkingBird.java
Bird.java    Duck.class  FlyingBird.java   java.script  Makefile       Owl.class     Penguin.java
Birds.class  Duck.java   Goose.class       Kiwi.class   Ostrich.class  Owl.java      WalkingBird.class
]0;djv78@gold02: ~/CS214Work/214/projects/10/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/java[00m$ cat *.java
/* Bird.java provides a Bird class.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Duncan Van Keulen
 * Date: 4/23/2020
 ******************************************************/

import java.io.*;

public abstract class Bird
{

  /* default constructor
  * PostCond: myName == "".
  */
  public Bird() {
    myName = "";
  }


  /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Bird(String name) {
    myName = name;
  }


  /* Name accessor
  * Return: myName.
  */
  public String getName() {
    return myName;
  }


  /* A Bird's Call
  * Return: a default bird-call ("Squawk!").
  */

  public String call() {
    return "Squaaaaaaaaaawk!";
  } 

  /* Output a Bird 
  * Output: Everything known about myself
  *          to the standard output stream.
  */

  public void print()
  {
    System.out.println( getName() + ' ' + getClass().getName() + " just " + movement()
                      + " and said " + call() );
  }

  /* A Bird's Movement
  * Return: a default bird movement ("existed")
  */
  public abstract String movement();

  private String myName;
}

/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by: Duncan Van Keulen
 * Date: 4/23/2020
 *********************************************************/

public class Birds {
  
  public static void main(String[] args) {
    System.out.println("\nWelcome to the Bird Park!\n");

    WalkingBird bird01 = new WalkingBird();
    FlyingBird bird02 = new FlyingBird();

    bird01.print();
    bird02.print();

    Duck bird2 = new Duck("Donald");
    bird2.print();

    Goose bird3 = new Goose("Mother Goose");
    bird3.print();

    Owl bird4 = new Owl("Woodsey");
    bird4.print();

    Penguin bird5 = new Penguin("Peter");
    bird5.print();
    
    Ostrich bird6 = new Ostrich("Orville");
    bird6.print();
    
    Kiwi bird7 = new Kiwi("Kathy");
    bird7.print();
    System.out.println();

  }
}

/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Duncan Van Keulen
 * Date: 4/23/2020
 ******************************************************/

public class Duck extends FlyingBird {
    

  /* default constructor
  */
  public Duck() {
    super();
  }

    /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Duck(String name) {     
    super(name);
  } 

  /* A Duck's Call
  * Return: a duck-call ("Quack!").
  */
  public String call() {
    return "Quack!";
  } 
}

/* FlyingBird.java provides extends the bird class for flying birds
 *
 * By: Duncan Van Keulen
 * Date: 4/27/2020
 ******************************************************/

public class FlyingBird extends Bird {

    /* default constructor
    */
    public FlyingBird() {
        super();
    }
    
    /* explicit constructor
    * Recieve: String name - the name of the FlyingBrid
    * Post: FlyingBird will be initialized with that name
    */
    public FlyingBird(String name) {
        super(name);
    }

    /* movement of a flying bird (flying)
    * Return: a string indicating movement ("flew by")
    */
    public String movement() {
        return "flew by";
    }
}/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Duncan Van Keulen
 * Date: 4/23/2020
 ******************************************************/

public class Goose extends FlyingBird {


  /*default constructor
  */
  public Goose() {
    super();
  }

  /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Goose(String name) {     
    super(name);
  } 

  /* A Goose's Call
  * Return: a goose-call ("Honk!").
  */
  public String call() {
    return "Honk!";
  }

} 

/* Kiwi.java provides an Kiwi subclass of WalkingBird.
 *
 * By: Duncan Van Keulen
 * Date: 4/27/2020
 ******************************************************/

public class Kiwi extends WalkingBird {


    /* default constructor
    */
    public Kiwi() {
        super();
    }

    /* explicit constructor
    * Receive: name, a String 
    * PostCond: myName == name.
    */
    public Kiwi(String name) {
        super(name);
    }

    /* An Kiwi's Call
    * Return: an Kiwi-call ("Whoo-hoo!").
    */
    public String call() {
        return "Sqwee! Sqwee!";
    }

} 
/* Ostrich.java provides an Ostrich subclass of WalkingBird.
 *
 * By: Duncan Van Keulen
 * Date: 4/27/2020
 ******************************************************/

public class Ostrich extends WalkingBird {


    /* default constructor
    */
    public Ostrich() {
        super();
    }

    /* explicit constructor
    * Receive: name, a String 
    * PostCond: myName == name.
    */
    public Ostrich(String name) {
        super(name);
    }

    /* An Ostrich's Call
    * Return: an Ostrich-call ("Whoo-hoo!").
    */
    public String call() {
        return "Snork!";
    }

} 
/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Duncan Van Keulen
 * Date: 4/23/2020
 ******************************************************/

public class Owl extends FlyingBird {


  /* default constructor
  */
  public Owl() {
    super();
  }

  /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Owl(String name) {
    super(name);
  }


  /* An Owl's Call
  * Return: an owl-call ("Whoo-hoo!").
  */
  public String call() {
    return "Whoo hoo!";
  }

} 

/* Penguin.java provides an Penguin subclass of WalkingBird.
 *
 * By: Duncan Van Keulen
 * Date: 4/27/2020
 ******************************************************/

public class Penguin extends WalkingBird {

    /* default constructor
    */
    public Penguin() {
        super();
    }

    /* explicit constructor
    * Receive: name, a String 
    * PostCond: myName == name.
    */
    public Penguin(String name) {
        super(name);
    }

    /* An Penguin's Call
    * Return: an Penguin-call ("Whoo-hoo!").
    */

    public String call() {
        return "Huh-huh-huh-huuuuh!";
    }

} 
/* WalkingBird.java provides extends the bird class for walking birds
 *
 * By: Duncan Van Keulen
 * Date: 4/27/2020
 ******************************************************/

public class WalkingBird extends Bird {

    /* default constructor
    */
    public WalkingBird() {
        super();
    }

    /* Explicit constructor
    * Recieve: String name - the name of the walking bird
    * Post: WalkingBird will be initialized with that name
    */
    public WalkingBird(String name) {
        super(name);
    }

    /* the movement of a walking bird
    * Return: A string representing the movement of a walking bird (walking)
    */
    public String movement() {
        return "walked by";
    }
}]0;djv78@gold02: ~/CS214Work/214/projects/10/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/java[00m$ make
javac -deprecation Birds.java
]0;djv78@gold02: ~/CS214Work/214/projects/10/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/java[00m$ java Birds

Welcome to the Bird Park!

 WalkingBird just walked by and said Squaaaaaaaaaawk!
 FlyingBird just flew by and said Squaaaaaaaaaawk!
Donald Duck just flew by and said Quack!
Mother Goose Goose just flew by and said Honk!
Woodsey Owl just flew by and said Whoo hoo!
Peter Penguin just walked by and said Huh-huh-huh-huuuuh!
Orville Ostrich just walked by and said Snork!
Kathy Kiwi just walked by and said Sqwee! Sqwee!

]0;djv78@gold02: ~/CS214Work/214/projects/10/java[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/java[00m$ exit

Script done on 2020-04-28 10:40:21-0400
Script started on 2020-04-28 10:56:00-0400
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ ls
ada.script        birds.adb         duck_package.o     goose_package.ads  kiwi_package.o       owl_package.adb      penguin_package.ali
bird_package.adb  birds.ali         flying_bird.adb    goose_package.ali  Makefile             owl_package.ads      penguin_package.o
bird_package.ads  birds.o           flying_bird.ads    goose_package.o    ostrich_package.adb  owl_package.ali      walking_bird.adb
bird_package.ali  duck_package.adb  flying_bird.ali    kiwi_package.adb   ostrich_package.ads  owl_package.o        walking_bird.ads
bird_package.o    duck_package.ads  flying_bird.o      kiwi_package.ads   ostrich_package.ali  penguin_package.adb  walking_bird.ali
[0m[01;32mbirds[0m             duck_package.ali  goose_package.adb  kiwi_package.ali   ostrich_package.o    penguin_package.ads  walking_bird.o
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ cat *.adb ; [K[K[K[Ks
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

package Bird_Package is

type Bird_Type is abstract tagged private;

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------

procedure Init(A_Bird : out Bird_Type; Name : in String);

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------

function  Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------

function  Call(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- A Bird's Movement                               -
 -- Abstract function - meant to be defined by      -
 --     subclasses                                  -
 ----------------------------------------------------

function Movement(A_Bird : in Bird_Type) return String is abstract;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------

function  Type_Name(A_Bird : in Bird_Type) return String;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------

procedure Put(A_Bird : in Bird_Type'Class);

private

type Bird_Type is
    abstract tagged record
        My_Name : String(1..6);
    end record;

end Bird_Package;
-- duck_package.ads gives Duck-related declarations,
--  and derives Duck from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Duck_Package is

type Duck_Type is new Flying_Bird_Type with private;

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------

    function  Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
 
    function  Type_Name(A_Duck : in Duck_Type) return String;

 
private

    type Duck_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Duck_Package;
-- Flying_Bird.ads gives Flying_Bird related declarations
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Flying_Bird is

type Flying_Bird_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Flying_Bird's Movement                        -
 -- Receive: A_Flying_Bird, a Flying_Bird_Type      -
 -- Return: the movement of a flying bird (flying)  -
 ----------------------------------------------------

function Movement(A_Flying_Bird : in Flying_Bird_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Flying_Bird (Over-rides Bird.Type_Name())-
 -- Receive: A_Flying_Bird, a Flying_Bird_Type.                  -
 -- Return: "Flying_Bird".                                       -
 -----------------------------------------------------------

function  Type_Name(A_Flying_Bird : in Flying_Bird_Type) return String;

private

    type Flying_Bird_Type is new Bird_Type with
        record
            null;
        end record;

end Flying_Bird;-- goose_package.ads gives Goose-related declarations,
--  and derives Goose from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Goose_Package is

    type Goose_Type is new Flying_Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------

    function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------

    function  Type_Name(A_Goose : in Goose_Type) return String;

    private

    type Goose_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Goose_Package;
-- Kiwi_package.ads gives Kiwi-related declarations,
--  and derives Kiwi from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Kiwi_Package is

    type Kiwi_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: An_Kiwi, an Kiwi_Type.                 -
 -- Return: "Squee! Squee"                          -
 ----------------------------------------------------

function  Call(An_Kiwi : in Kiwi_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Kiwi                         -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Kiwi, an Kiwi_Type.                  -
 -- Return: "Kiwi".                                  -
 -----------------------------------------------------

    function  Type_Name(An_Kiwi : Kiwi_Type) return String;

    private
    
    type Kiwi_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Kiwi_Package;
-- Ostrich_package.ads gives Ostrich-related declarations,
--  and derives Ostrich from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Ostrich_Package is

    type Ostrich_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())       -
 -- Receive: An_Ostrich, an Ostrich_Type.           -
 -- Return: "Snork!"                                -
 ----------------------------------------------------

function  Call(An_Ostrich : in Ostrich_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Ostrich                      -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Ostrich, an Ostrich_Type.            -
 -- Return: "Ostrich".                               -
 -----------------------------------------------------

    function  Type_Name(An_Ostrich : Ostrich_Type) return String;

    private
    
    type Ostrich_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Ostrich_Package;
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Flying_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Flying_Bird; use Flying_Bird;

package Owl_Package is

    type Owl_Type is new Flying_Bird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------

function  Call(An_Owl : in Owl_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------

    function  Type_Name(An_Owl : Owl_Type) return String;

    private
    
    type Owl_Type is new Flying_Bird_Type with
        record
            null;
        end record;

end Owl_Package;
-- Penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Walking_Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Walking_Bird; use Walking_Bird;

package Penguin_Package is

    type Penguin_Type is new Walking_Bird_Type with private;

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())       -
 -- Receive: An_Penguin, an Penguin_Type.           -
 -- Return: "Huh-huh-huh-huuuuh!                    -
 ----------------------------------------------------

function  Call(An_Penguin : in Penguin_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Penguin                      -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Penguin, an Penguin_Type.            -
 -- Return: "Penguin".                               -
 -----------------------------------------------------

    function  Type_Name(An_Penguin : Penguin_Type) return String;

    private
    
    type Penguin_Type is new Walking_Bird_Type with
        record
            null;
        end record;

end Penguin_Package;
-- walking_bird.ads gives Walking_Bird related declarations
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Walking_Bird is

type Walking_Bird_Type is new Bird_Type with private;

 ----------------------------------------------------
 -- A Walking_Bird's Movement                       -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type    -
 -- Return: the movement of a walking bird (walking)-
 ----------------------------------------------------

function Movement(A_Walking_Bird : in Walking_Bird_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Walking_Bird (Over-rides Bird.Type_Name()) -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type.                  -
 -- Return: "Walking_Bird".                                        -
 -----------------------------------------------------------

function  Type_Name(A_Walking_Bird : in Walking_Bird_Type) return String;

private

    type Walking_Bird_Type is new Bird_Type with
        record
            null;
        end record;

end Walking_Bird;]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ cat *.adb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------

    procedure Init(A_Bird : out Bird_Type; Name : in String) is
    begin
        A_Bird.My_Name := Name;
    end Init;

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------

    function Name(A_Bird : in Bird_Type) return String is
    begin
        return A_Bird.My_Name;
    end Name;

-----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------

    function Call(A_Bird : in Bird_Type) return String is
    begin
        return "Squawwwwwwk!";
    end Call;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------

    function Type_Name(A_Bird : in Bird_Type) return String is
    begin
        return "Bird";
    end Type_Name;

 ---------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------

    procedure Put(A_Bird : in Bird_Type'Class) is
    begin
        Put( Name(A_Bird) );
        Put( ' ' );
        Put( Type_Name(A_Bird) );
        Put( " just ");
        Put( Movement(A_Bird) );
        Put( " and said ");
        Put( Call(A_Bird) );
    end Put; 

end Bird_Package;

-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
-----------------------------------------------------

with Bird_Package,
        Flying_Bird,
        Walking_Bird,
        Duck_Package,
        Goose_Package, 
        Owl_Package,
        Penguin_Package,
        Ostrich_Package,
        Kiwi_Package,
    Ada.Text_IO;
use Bird_Package,
        Flying_Bird,
        Walking_Bird,
        Duck_Package, 
        Goose_Package,
        Owl_Package,
        Penguin_Package,
        Ostrich_Package,
        Kiwi_Package,
    Ada.Text_IO;


procedure Birds is

Bird2 : Duck_Type;       -- derived class 1
Bird3 : Goose_Type;      -- derived class 2
Bird4 : Owl_Type;        -- derived class 3
Bird5 : Flying_Bird_Type;
Bird6 : Walking_Bird_Type;
Bird7 : Penguin_Type;
Bird8 : Ostrich_Type;
Bird9 : Kiwi_Type;

begin
New_Line;
Put("Welcome to the Bird Park!");
New_Line;

Init(Bird5, "Flyer ");
Put(Bird5); New_Line;

Init(Bird6, "Walker");
Put(Bird6); New_Line;

Init(Bird2, "Donald");
Put(Bird2); New_Line;

Init(Bird3, "Mother");
Put(Bird3); New_Line;

Init(Bird4, "Woodsy");
Put(Bird4); New_Line;

Init(Bird7, "Peter ");
Put(Bird7); New_Line;

Init(Bird8, "Oliver");
Put(Bird8); New_Line;

Init(Bird9, "Kathy ");
Put(Bird9); New_Line;

New_Line;
end Birds;

-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------

    function Call(A_Duck : in Duck_Type) return String is
    begin
        return "Quack!";
    end Call;

 -----------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------

    function Type_Name(A_Duck : in Duck_Type) return String is
    begin
        return "Duck";
    end Type_Name;

end Duck_Package;
-- Flying_Bird.adb defines Flying_Bird related methods
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Flying_Bird is

 ----------------------------------------------------
 -- A Flying_Bird's Movement                        -
 -- Receive: A_Flying_Bird, a Flying_Bird_Type      -
 -- Return: the movement of a flying bird (flying)  -
 ----------------------------------------------------

function Movement(A_Flying_Bird : in Flying_Bird_Type) return String is
begin
    return "flew past";
end Movement;

 ------------------------------------------------------------
 -- Determine type of a Flying_Bird (Over-rides Bird.Type_Name())-
 -- Receive: A_Flying_Bird, a Flying_Bird_Type.                  -
 -- Return: "Flying_Bird".                                       -
 -----------------------------------------------------------

function Type_Name(A_Flying_Bird : in Flying_Bird_Type) return String is
begin
    return "Flying Bird";
end Type_Name;

end Flying_Bird;-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------

    function Call(A_Goose : in Goose_Type) return String is
    begin
        return "Honk!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------

    function Type_Name(A_Goose : in Goose_Type) return String is
    begin
        return "Goose";
    end Type_Name;

end Goose_Package;
-- Kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: An_Kiwi, an Kiwi_Type.                 -
 -- Return: "Squee! Squee!"                         -
 ----------------------------------------------------

    function Call(An_Kiwi : in Kiwi_Type) return String is
    begin
        return "Squee! Squee!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Kiwi                         -
 -- Receive: An_Kiwi, an Kiwi_Type.                  -
 -- Return: "Kiwi".                                  -
 -----------------------------------------------------

    function Type_Name(An_Kiwi : in Kiwi_Type) return String is
    begin
        return "Kiwi";
    end Type_Name;

end Kiwi_Package;
-- Ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())       -
 -- Receive: An_Ostrich, an Ostrich_Type.           -
 -- Return: "Snork!"                   -
 ----------------------------------------------------

    function Call(An_Ostrich : in Ostrich_Type) return String is
    begin
        return "Snork!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Ostrich                      -
 -- Receive: An_Ostrich, an Ostrich_Type.            -
 -- Return: "Ostrich".                               -
 -----------------------------------------------------

    function Type_Name(An_Ostrich : in Ostrich_Type) return String is
    begin
        return "Ostrich";
    end Type_Name;

end Ostrich_Package;
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is


 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------

    function Call(An_Owl : in Owl_Type) return String is
    begin
        return "Whoo!";
    end Call;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------

    function Type_Name(An_Owl : in Owl_Type) return String is
    begin
        return "Owl";
    end Type_Name;

end Owl_Package;
-- Penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())       -
 -- Receive: An_Penguin, an Penguin_Type.           -
 -- Return: "Huh-huh-huh-huuuuh!"                   -
 ----------------------------------------------------

    function Call(An_Penguin : in Penguin_Type) return String is
    begin
        return "Huh-huh-huh-huuuuh!";
    end Call;

 -----------------------------------------------------
 -- (Over-rides Bird.Type_Name())                    -
 -- Determine type of a Penguin                      -
 -- Receive: An_Penguin, an Penguin_Type.            -
 -- Return: "Penguin".                               -
 -----------------------------------------------------

    function Type_Name(An_Penguin : in Penguin_Type) return String is
    begin
        return "Penguin";
    end Type_Name;

end Penguin_Package;
-- walking_bird.adb defines Walking_Bird related methods
--
-- By: Duncan Van Keulen
-- Date: 4/27/2020
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Walking_Bird is

 ----------------------------------------------------
 -- A Walking_Bird's Movement                       -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type    -
 -- Return: the movement of a walking bird (walking)-
 ----------------------------------------------------

function Movement(A_Walking_Bird : in Walking_Bird_Type) return String is
begin
    return "walked past";
end Movement;

 ------------------------------------------------------------
 -- Determine type of a Walking_Bird (Over-rides Bird.Type_Name()) -
 -- Receive: A_Walking_Bird, a Walking_Bird_Type.                  -
 -- Return: "Walking_Bird".                                        -
 -----------------------------------------------------------

function  Type_Name(A_Walking_Bird : in Walking_Bird_Type) return String is
begin
    return "Walking Bird";
end Type_Name;

end Walking_Bird;]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ make
gcc -c  bird_package.adb
gcc -c  duck_package.adb
gcc -c  goose_package.adb
gcc -c  owl_package.adb
gcc -c  penguin_package.adb
gcc -c  ostrich_package.adb
gcc -c  kiwi_package.adb
gnatbind birds.ali
gnatlink birds.ali
]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ ./birds

Welcome to the Bird Park!
Flyer  Flying Bird just flew past and said Squawwwwwwk!
Walker Walking Bird just walked past and said Squawwwwwwk!
Donald Duck just flew past and said Quack!
Mother Goose just flew past and said Honk!
Woodsy Owl just flew past and said Whoo!
Peter  Penguin just walked past and said Huh-huh-huh-huuuuh!
Oliver Ostrich just walked past and said Snork!
Kathy  Kiwi just walked past and said Squee! Squee!

]0;djv78@gold02: ~/CS214Work/214/projects/10/ada[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ada[00m$ exit

Script done on 2020-04-28 10:56:48-0400
Script started on 2020-04-28 10:45:34-0400
]0;djv78@gold02: ~/CS214Work/214/projects/10/ruby[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ruby[00m$ ls
Bird.rb  birds.rb  Duck.rb  FlyingBird.rb  Goose.rb  Kiwi.rb  Ostrich.rb  Owl.rb  Penguin.rb  ruby.script  WalkingBird.rb
]0;djv78@gold02: ~/CS214Work/214/projects/10/ruby[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ruby[00m$ co[K[Kcat *.rb
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date: 4/27/2020
####################################################

class Bird

    attr_reader :name

    def initialize(name)
        @name = name
    end

    # Define a default bird's call
    def call
        'Squaaaaaaawk!'
        end
    
    def className
        self.class.to_s
    end

    # Output a bird
    def print
        puts name + " " + className + " just " + movement + " and said " + call
    end

    # Define the movement of a bird abstractly, to be supplied by subclasses
    def movement ; end

end# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date: 4/27/2020
######################################################

require './Bird.rb'
require './Duck.rb'
require './Goose.rb'
require './Owl.rb'
require './FlyingBird.rb'
require './WalkingBird.rb'
require './Penguin.rb'
require './Ostrich.rb'
require './Kiwi.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

bird4 = FlyingBird.new "Average Flyer"
bird4.print

bird5 = WalkingBird.new "Average Walker"
bird5.print

bird6 = Penguin.new "Peter"
bird6.print

bird7 = Ostrich.new "Orville"
bird7.print

bird8 = Kiwi.new "Kathy"
bird8.print

puts "\n\n"# Duck.rb | Defines the Duck class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './FlyingBird.rb'

class Duck < FlyingBird

    def call
        'Quack!'
    end

end# FlyingBird.rb | Defines the FlyingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# By: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './Bird.rb'

class FlyingBird < Bird

    def movement
        'flew by'
    end
end# Goose.rb | Defines the Goose class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './FlyingBird.rb'

class Goose < FlyingBird

    def call
        'Honk!'
    end

end# Kiwi.rb | Defines the Kiwi class which inherits attributes and methods
#   from the WalkingBird superclass.
#
# By: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './WalkingBird.rb'

class Kiwi < WalkingBird

    def call
        'Squee! Squee!'
    end

end# Ostrich.rb | Defines the Ostrich class which inherits attributes and methods
#   from the WalkingBird superclass.
#
# By: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './WalkingBird.rb'

class Ostrich < WalkingBird

    def call
        'Snork!'
    end

end# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the FlyingBird superclass.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './FlyingBird.rb'

class Owl < FlyingBird

    def call
        'Whoo-hoo!'
    end

end# Penguin.rb | Defines the Penguin class which inherits attributes and methods
#   from the WalkingBird superclass.
#
# By: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './WalkingBird.rb'

class Penguin < WalkingBird

    def call
        'Huh-huh-huh-huuuuh!'
    end

end# WalkingBird.rb | Defines the WalkingBird class which inherits attributes and methods
#   from the Bird superclass.
#
# By: Duncan Van Keulen
# Date:4/27/2020
####################################################

require './Bird.rb'

class WalkingBird < Bird

    def movement
        'walked by'
    end

end]0;djv78@gold02: ~/CS214Work/214/projects/10/ruby[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ruby[00m$ ruby birds.rb

Welcome to the Bird Park!

Donald Duck just flew by and said Quack!
Mother Goose just flew by and said Honk!
Woodsey Owl just flew by and said Whoo-hoo!
Average Flyer FlyingBird just flew by and said Squaaaaaaawk!
Average Walker WalkingBird just walked by and said Squaaaaaaawk!
Peter Penguin just walked by and said Huh-huh-huh-huuuuh!
Orville Ostrich just walked by and said Snork!
Kathy Kiwi just walked by and said Squee! Squee!


]0;djv78@gold02: ~/CS214Work/214/projects/10/ruby[01;32mdjv78@gold02[00m:[01;34m~/CS214Work/214/projects/10/ruby[00m$ exit

Script done on 2020-04-28 10:45:59-0400
