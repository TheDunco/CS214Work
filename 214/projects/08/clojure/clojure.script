Script started on 2020-04-13 16:52:24-0400
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ cat src/Temperature.clj
;; TemperatureTable.cljis a module for Temperautres
;;
;; Usage: clojure -m TemperatureTable
;;
;; Completed by: Duncan Van Keulen
;; Date: 4/12/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require '[clojure.string :as str]) ;; include the Temperature module

;; Define a Temperature record with degree and scale attributes
(defrecord Temperature [myDegree myScale])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Temperature constructs a Temperature from a float and a character 
;;; Receive: degree : the degree of the temperature
;;; Recieve: scale : the scale that that degree is in
;;; Return: the Temperature (degree scale)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Temperature [degree scale]
  (->Temperature degree scale)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getDegree returns the degree of the recieved temperature object
;;; Receive: temp : a temperature
;;; PRE: temp MUST be a temperature that's initialized
;;; Return: the myDegree attribute of that temp object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getDegree [^Temperature temp] 
  (:myDegree temp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getScale returns the scale of the recieved temperature object
;;; Receive: temp : a temperature
;;; PRE: temp MUST be a temperature that's initialized
;;; Return: the myScale attribute of that temp object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getScale [^Temperature temp]
  (:myScale temp)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; isValidTemperature determines if a degree and scale would 
;;;     constitute a valid Temperature
;;; Receive: degree : the deree of the desired Temperature
;;; Recieve: scale : the scale of the desired Temperature
;;; Return: a boolean indicating whether or not the values provided
;;;     constitute a valid Temperature
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn isValidTemperature [degree scale] 
  (cond
    (= \F scale) (if (< degree -460.0) false true)
    (= \f scale) (if (< degree -460.0) false true)
    (= \C scale) (if (< degree -273.15) false true)
    (= \c scale) (if (< degree -273.15) false true)
    (= \K scale) (if (< degree 0.0) false true)
    (= \k scale) (if (< degree 0.0) false true)
    :else false
  )   
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toFahrenheit converts a temperature to Fahrenheit from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toFahrenheit [^Temperature temp]
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) temp ;; no conversion needed
    (= \f (getScale temp)) temp ;; no conversion needed

    ;; From Celsius
    (= \C (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (getDegree temp)) 32.0) \F)
    (= \c (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (getDegree temp)) 32.0) \F)

    ;; From Kelvin
    (= \K (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (- (getDegree temp) 273.15)) 32.0) \F)
    (= \k (getScale temp)) (make-Temperature (+ (* (/ 9.0 5.0) (- (getDegree temp) 273.15)) 32.0) \F)

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toCelsius converts a temperature to Celsius from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toCelsius [^Temperature temp]
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) (make-Temperature (* (/ 5.0 9.0) (- (getDegree temp) 32.0)) \C)
    (= \f (getScale temp)) (make-Temperature (* (/ 5.0 9.0) (- (getDegree temp) 32.0)) \C)

    ;; From Celsius
    (= \C (getScale temp)) temp ;; no conversion needed
    (= \c (getScale temp)) temp ;; no conversion needed

    ;; From Kelvin
    (= \K (getScale temp)) (make-Temperature (- (getDegree temp) 273.15) \C)
    (= \k (getScale temp)) (make-Temperature (- (getDegree temp) 273.15) \C)

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; toKelvin converts a temperature to Kelvin from an arbitrary scale
;;; Receive: temp : the temperature to be converted
;;; Precondition: temp MUST be a Temperature and must be initialized
;;; Return: A new Temperature record with converted degree and scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn toKelvin [^Temperature temp] 
  (cond
    ;; From Fahrenheit
    (= \F (getScale temp)) (make-Temperature (+ (* (- (getDegree temp) 32.0) (/ 5.0 9.0)) 273.15) \K)
    (= \f (getScale temp)) (make-Temperature (+ (* (- (getDegree temp) 32.0) (/ 5.0 9.0)) 273.15) \K)

    ;; From Celsius
    (= \C (getScale temp)) (make-Temperature (+ (getDegree temp) 273.15) \K)
    (= \c (getScale temp)) (make-Temperature (+ (getDegree temp) 273.15) \K)

    ;; From Kelvin
    (= \K (getScale temp)) temp ;; no conversion needed
    (= \k (getScale temp)) temp ;; no conversion needed

    :else false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; enterTemperature allows a Temperature record's values to be 
;;;     entered by the user
;;; Recieve: degree and scale to be read in as input
;;; Precondition: the input degree and scale must consitute a
;;;     valid Temperature object
;;; Return: a new Temperature record with the user entered values
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn enterTemperature []
  (let 
    [
      input (read-line) ;; get the input from the user
      splicedInput (str/split input #" ")
      inputDegree (Float/parseFloat (first splicedInput))
      inputScale (get (second splicedInput) 0)
    ]
    (if (isValidTemperature inputDegree inputScale)
      (->Temperature inputDegree inputScale)
      (do (println "Couldn't enter temperature") (flush))
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; dispalyTemperature prints a Temperature record to the screen
;;; Receive: temp : a Temperature
;;; Precondition: temp MUST be an initialized Temperature record
;;; Postcondition: the Temperature will be conveniently formatted
;;;     and printed to the screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn displayTemperature [^Temperature temp]
  (print (format "%.5f"(getDegree temp)) " " (getScale temp))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; raiseTemperature raises a temperature's degree attribute by
;;;     the input degrees
;;; Receive: temp : a Temperature record
;;; Recieve: degree : a float - the desired degrees to raise by
;;; Precondition: temp MUST be an initialized Temperature record
;;; Precondition: raising by degrees must consitute a valid Temperature
;;; Return: a new temperature with updated degrees
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn raiseTemperature [^Temperature temp degree]
  (if (isValidTemperature (+ (getDegree temp) degree) (getScale temp)) 
    ;; True
    (make-Temperature (+ (getDegree temp) degree) (getScale temp))
    ;; False
    (do (print "Could not raise temperature") (flush))
  )  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lowerTemperature lowers a temperature's degree attribute by
;;;     the input degrees
;;; Receive: temp : a Temperature record
;;; Recieve: degree : a float - the desired degrees to lower by
;;; Precondition: temp MUST be an initialized Temperature record
;;; Precondition: raising by degrees must consitute a valid Temperature
;;; Return: a new temperature with updated degrees
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lowerTemperature [^Temperature temp degree]
  (if (isValidTemperature (- (getDegree temp) degree) (getScale temp)) 
    ;; True
    (make-Temperature (- (getDegree temp) degree) (getScale temp))
    ;; False
    (do (print "Could not lower temperature") (flush))
  )  
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; equals allows checking if two Temperatures are equal regardless of scale
;;; Receive: temp1 : Temperature - the lhs of the = operation
;;; Recieve: temp2 : Temprature - the rhs of the = operation
;;; Precondition: temp1 & temp2 MUST be initialized Temperature records
;;; Return: a boolean indicating whether or not the temperatures are equal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn equals [^Temperature temp1 ^Temperature temp2]
  (if (= (getDegree (toFahrenheit temp1)) (getDegree (toFahrenheit temp2)))
    ;; True-Section
      true ;; return true
    ;; False-Section
      false ;; return false
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lessThan allows checking if one Temperature is less than another regardless of scale
;;; Receive: temp1 : Temperature - the lhs of the < operation
;;; Recieve: temp2 : Temprature - the rhs of the < operation
;;; Precondition: temp1 & temp2 MUST be initialized Temperature records
;;; Return: a boolean indicating if temp1 < temp2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn lessThan [^Temperature temp1 ^Temperature temp2]
  (if (< (getDegree (toFahrenheit temp1)) (getDegree (toFahrenheit temp2)))
    ;; True-Section
      true ;; return true
    ;; False-Section
      false ;; return false
  )
)
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ cat src/TemperatureTable.clj
;; TemperatureTable.clj tests a Clojure Temperature type,
;;
;; Usage: clojure -m TemperatureTable
;;
;; Completed by: Duncan Van Keulen
;; Date: 4/12/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns TemperatureTable)

;; Load the Temperature module
(load-file "src/Temperature.clj")

(defn -main [] 
	;; Get the baseTemp from the user
	(print "Enter the base temperature: ") (flush)
	(let [ baseTemp (enterTemperature) ]

		;; Get the limitTemp from the user
		(print "Enter the limit temperature: ") (flush)
		(let [ limitTemp (enterTemperature) ]

			;; Get the stepValue from the user
			(print "Enter the step value: ") (flush)
			(let [ stepValue (read) ]
				(newline) (println "Fahrenheit              Celsius                 Kelvin") (newline)
				
				(loop [stepTemp baseTemp]
					;; Loop while the baseTemp is less than or equal to the limitTemp
					(when (lessThan stepTemp limitTemp) 

						;; Display table
						(displayTemperature (toFahrenheit stepTemp))
						(print "		")
						(displayTemperature (toCelsius stepTemp))
						(print "		")
						(displayTemperature (toKelvin stepTemp))
						(newline) (flush)

						;; Recurse with the temperature raised in the base scale
						(recur (raiseTemperature stepTemp stepValue))
					);; end when
					
				);; end loop
				
			);; end inner let
		)
	)
)
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ clojure -m TemperatureTable
Enter the base temperature: 0 F
Enter the limit temperature: 100 C
Enter the step value: 2.5

Fahrenheit              Celsius                 Kelvin

0.00000   F		-17.77778   C		255.37222   K
2.50000   F		-16.38889   C		256.76111   K
5.00000   F		-15.00000   C		258.15000   K
7.50000   F		-13.61111   C		259.53889   K
10.00000   F		-12.22222   C		260.92778   K
12.50000   F		-10.83333   C		262.31667   K
15.00000   F		-9.44444   C		263.70556   K
17.50000   F		-8.05556   C		265.09444   K
20.00000   F		-6.66667   C		266.48333   K
22.50000   F		-5.27778   C		267.87222   K
25.00000   F		-3.88889   C		269.26111   K
27.50000   F		-2.50000   C		270.65000   K
30.00000   F		-1.11111   C		272.03889   K
32.50000   F		0.27778   C		273.42778   K
35.00000   F		1.66667   C		274.81667   K
37.50000   F		3.05556   C		276.20556   K
40.00000   F		4.44444   C		277.59444   K
42.50000   F		5.83333   C		278.98333   K
45.00000   F		7.22222   C		280.37222   K
47.50000   F		8.61111   C		281.76111   K
50.00000   F		10.00000   C		283.15000   K
52.50000   F		11.38889   C		284.53889   K
55.00000   F		12.77778   C		285.92778   K
57.50000   F		14.16667   C		287.31667   K
60.00000   F		15.55556   C		288.70556   K
62.50000   F		16.94444   C		290.09444   K
65.00000   F		18.33333   C		291.48333   K
67.50000   F		19.72222   C		292.87222   K
70.00000   F		21.11111   C		294.26111   K
72.50000   F		22.50000   C		295.65000   K
75.00000   F		23.88889   C		297.03889   K
77.50000   F		25.27778   C		298.42778   K
80.00000   F		26.66667   C		299.81667   K
82.50000   F		28.05556   C		301.20556   K
85.00000   F		29.44444   C		302.59444   K
87.50000   F		30.83333   C		303.98333   K
90.00000   F		32.22222   C		305.37222   K
92.50000   F		33.61111   C		306.76111   K
95.00000   F		35.00000   C		308.15000   K
97.50000   F		36.38889   C		309.53889   K
100.00000   F		37.77778   C		310.92778   K
102.50000   F		39.16667   C		312.31667   K
105.00000   F		40.55556   C		313.70556   K
107.50000   F		41.94444   C		315.09444   K
110.00000   F		43.33333   C		316.48333   K
112.50000   F		44.72222   C		317.87222   K
115.00000   F		46.11111   C		319.26111   K
117.50000   F		47.50000   C		320.65000   K
120.00000   F		48.88889   C		322.03889   K
122.50000   F		50.27778   C		323.42778   K
125.00000   F		51.66667   C		324.81667   K
127.50000   F		53.05556   C		326.20556   K
130.00000   F		54.44444   C		327.59444   K
132.50000   F		55.83333   C		328.98333   K
135.00000   F		57.22222   C		330.37222   K
137.50000   F		58.61111   C		331.76111   K
140.00000   F		60.00000   C		333.15000   K
142.50000   F		61.38889   C		334.53889   K
145.00000   F		62.77778   C		335.92778   K
147.50000   F		64.16667   C		337.31667   K
150.00000   F		65.55556   C		338.70556   K
152.50000   F		66.94444   C		340.09444   K
155.00000   F		68.33333   C		341.48333   K
157.50000   F		69.72222   C		342.87222   K
160.00000   F		71.11111   C		344.26111   K
162.50000   F		72.50000   C		345.65000   K
165.00000   F		73.88889   C		347.03889   K
167.50000   F		75.27778   C		348.42778   K
170.00000   F		76.66667   C		349.81667   K
172.50000   F		78.05556   C		351.20556   K
175.00000   F		79.44444   C		352.59444   K
177.50000   F		80.83333   C		353.98333   K
180.00000   F		82.22222   C		355.37222   K
182.50000   F		83.61111   C		356.76111   K
185.00000   F		85.00000   C		358.15000   K
187.50000   F		86.38889   C		359.53889   K
190.00000   F		87.77778   C		360.92778   K
192.50000   F		89.16667   C		362.31667   K
195.00000   F		90.55556   C		363.70556   K
197.50000   F		91.94444   C		365.09444   K
200.00000   F		93.33333   C		366.48333   K
202.50000   F		94.72222   C		367.87222   K
205.00000   F		96.11111   C		369.26111   K
207.50000   F		97.50000   C		370.65000   K
210.00000   F		98.88889   C		372.03889   K
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ clojure -m TemperatureTable
Enter the base temperature: o 0 K
Enter the limit temperature: 212 F
Enter the step value: 20.0

Fahrenheit              Celsius                 Kelvin

-459.67000   F		-273.15000   C		0.00000   K
-423.67000   F		-253.15000   C		20.00000   K
-387.67000   F		-233.15000   C		40.00000   K
-351.67000   F		-213.15000   C		60.00000   K
-315.67000   F		-193.15000   C		80.00000   K
-279.67000   F		-173.15000   C		100.00000   K
-243.67000   F		-153.15000   C		120.00000   K
-207.67000   F		-133.15000   C		140.00000   K
-171.67000   F		-113.15000   C		160.00000   K
-135.67000   F		-93.15000   C		180.00000   K
-99.67000   F		-73.15000   C		200.00000   K
-63.67000   F		-53.15000   C		220.00000   K
-27.67000   F		-33.15000   C		240.00000   K
8.33000   F		-13.15000   C		260.00000   K
44.33000   F		6.85000   C		280.00000   K
80.33000   F		26.85000   C		300.00000   K
116.33000   F		46.85000   C		320.00000   K
152.33000   F		66.85000   C		340.00000   K
188.33000   F		86.85000   C		360.00000   K
]0;djv78@gold03: ~/CS214Work/214/projects/08/clojure[01;32mdjv78@gold03[00m:[01;34m~/CS214Work/214/projects/08/clojure[00m$ exit

Script done on 2020-04-13 16:54:17-0400
