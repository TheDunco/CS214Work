Script started on 2020-03-12 13:20:31-0400
]0;djv78@gold21: ~/CS214Work/214/labs/06/java[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/java[00m$ cat Average.java
/* Average.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 *
 * Student Name: Duncan Van Keulen
 * Date: 3-12-2020
 *
 * Precondition: theArray, is an array of double values.
 * Output: the average of the numbers in theArray.
 ***************************************************************/

import java.io.*;

public class Average {
    public static void main(String[] args) {

        double[] array0 = new double[0];
        double[] array1 = new double[] { 9.0, 8.0, 7.0, 6.0 };

        // output the average of the values in the arrays
        System.out.println("The first average is " + avg(array0));
        System.out.println("The second average is " + avg(array1));
    }

    /*
     * sum() is a method that computes the sum of all the values in an array of
     * doubles. Receive: anArray, an array of doubles. Return: the sum of the values
     * in anArray.
     ************************************************************/

    public static double sum(double[] theArray) {
        double total = 0.0;
        for (int i = 0; i < theArray.length; i++) {
            total += theArray[i];
        }
        return total;
    }

    /*
     * avg() is a method that computes the average of the values in an array.
     * Receive: anArray, an array of doubles. Return: the average of the values in
     * anArray.
     **************************************************************/

    public static double avg(double anArray[]) {
        if (anArray == null || anArray.length <= 0)
            return 0.0;
        else
            return sum(anArray) / anArray.length;
    }

}
]0;djv78@gold21: ~/CS214Work/214/labs/06/java[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/java[00m$ javac -deprecation Average.java 
]0;djv78@gold21: ~/CS214Work/214/labs/06/java[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/java[00m$ java Average 
The first average is 0.0
The second average is 7.5
]0;djv78@gold21: ~/CS214Work/214/labs/06/java[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/java[00m$ exit

Script done on 2020-03-12 13:20:48-0400
Script started on 2020-03-12 14:10:37-0400
]0;djv78@gold21: ~/CS214Work/214/labs/06/ada[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ada[00m$ cat average.adb
-- average.adb "test-drives" function Average.
-- Precondition: theArray is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Duncan Van Keulen
-- Date: 3-12-2020
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is

-- Declare Vector type
type vector is array ( Positive range <> ) of Float;

-- Define array0 as an array containing no values
array0 : Vector := (0.0, 0.0);

-- Define array1 as an array containing 9, 8, 7, 6
array1 : Vector := (9.0, 8.0, 7.0, 6.0);


----------------------------------------------
-- sum() sums the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the sum of the values in anArray. -
----------------------------------------------

function sum(A : in Vector) return Float is
   Total : Float := 0.0; 
   begin 
      --for I in A'Range 
      -- Using a constrained range
      for I in 1..A'Length
      loop 
         Total := Total + A(I);
      end loop; 
      return Total; 
   end sum; 

----------------------------------------------
-- average() computes the average of the values in an array           
-- Receive: A, an array (vector) of numbers     
-- Return: the average of the values in A. 
----------------------------------------------
function average(A : in Vector) return Float is
   begin
      return sum(A) / Float(A'Length);
   end average;

begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;

]0;djv78@gold21: ~/CS214Work/214/labs/06/ada[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ada[00m$ make average
gnatmake average.adb
x86_64-linux-gnu-gcc-7 -c average.adb
x86_64-linux-gnu-gnatbind-7 -x average.ali
x86_64-linux-gnu-gnatlink-7 average.ali
]0;djv78@gold21: ~/CS214Work/214/labs/06/ada[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ada[00m$ ./average
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
]0;djv78@gold21: ~/CS214Work/214/labs/06/ada[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ada[00m$ exit

Script done on 2020-03-12 14:10:46-0400
Script started on 2020-03-12 14:07:26-0400
]0;djv78@gold21: ~/CS214Work/214/labs/06/clojure[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/clojure[00m$ cat src/average.clj 
;; average.clj "test-drives" function average().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m average
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Duncan Van Keulen
;; Date: 3-12-2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns average)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum() sums the values in a vector.       
;; Receive: aVec, a vector of numbers.
;; Return: the sum of the values in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; harder (recursive) solution
(defn sum [aVec]
  (if (vector? aVec)      ; if aVec is a vector
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;     return 0
      (+ (peek aVec)      ;   else return the last value
        (sum (pop aVec)) ;    + sum(all but the last value)
      )
    )
  )
)

;; easier (non-recursive) solution
(defn sum2 [aVec]
  (if (vector? aVec)      ; if aVec is a vector:
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;    return 0
      (reduce + aVec)     ;   else reduce aVec using +
    )
  )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; average() computes the average of a vector of numbers.
;; Receive: aVec, a vector of numbers. 
;; Return: the average of the numbers in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn average[aVec]
  (if (empty? aVec)
  0.0 
  (/ (sum aVec) (count aVec))
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ emptyVec []
      testVec  [9.0 8.0 7.0 6.0]
    ]

    (print "\nThe empty vec: " emptyVec) 
    (print "\nThe test  vec: " testVec) 
    (println "\n")

    ; Test sum()...
    (printf "\nThe first sum is %.3f\n" (sum emptyVec))
    (printf "The second sum is %.3f\n" (sum testVec))

    ; Test average()...
    (printf "\nThe first average is %.3f\n" (average emptyVec))
    (printf "The second average is %.3f\n" (average testVec))
    (println "\n")

    ; Test sum2()...
    (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
    (printf "The second sum2 is %.3f\n" (sum2 testVec))
    (println "\n")
  )
)

]0;djv78@gold21: ~/CS214Work/214/labs/06/clojure[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/clojure[00m$ clojure-[K - [Km average

The empty vec:  []
The test  vec:  [9.0 8.0 7.0 6.0]


The first sum is 0.000
The second sum is 30.000

The first average is 0.000
The second average is 7.500



The first sum2 is 0.000
The second sum2 is 30.000


]0;djv78@gold21: ~/CS214Work/214/labs/06/clojure[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/clojure[00m$ exit

Script done on 2020-03-12 14:07:41-0400
Script started on 2020-03-12 14:28:11-0400
]0;djv78@gold21: ~/CS214Work/214/labs/06/ruby[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ruby[00m$ cat average.rb 
# average.rb averages the values of an array of doubles.
# Precondition: theArray is an array of numbers
# Output: the average of the values in theArray
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:: Duncan Van Keulen
# Date: 3-12-2020
########################################################

###############################################
# sum() sums the values in an array
# Receive: anArray, an array of numbers
# Return: the sum of the values in anArray.
################################################

def sum(anArray)
   total = 0
   anArray.each{ | val | total = total + val}
   return total
end

###############################################
# average() averages the values in an array
# Receive: anArray, an array of numbers
# Return: the average of the values in anArray.
################################################
def average(anArray)
   avg = 0
   sum = sum(anArray)
   if (anArray.length > 0) then
      avg = sum / anArray.length
   else
      return 0
   end
end

def main
   # Define array0 as an Array containing no values
   array0 = Array.new(0){}
   # Define array1 as an Array containing 9.0, 8.0, 7.0, 6.0
   array1 = Array[9.0, 8.0, 7.0, 6.0]



puts "sum 0 is: #{ sum(array0) }\n"
puts "sum 1 is: #{ sum(array1) }\n"

puts "average 0 is: #{ average(array0) }\n"
puts "average 1 is: #{ average(array1) }\n"
end

main

]0;djv78@gold21: ~/CS214Work/214/labs/06/ruby[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ruby[00m$ ruby average.rb
sum 0 is: 0
sum 1 is: 30.0
average 0 is: 0
average 1 is: 7.5
]0;djv78@gold21: ~/CS214Work/214/labs/06/ruby[01;32mdjv78@gold21[00m:[01;34m~/CS214Work/214/labs/06/ruby[00m$ exit

Let's play some packman on paper!

================================================.
     .-.   .-.     .--.                         |
    | OO| | OO|   / _.-' .-.   .-.  .-.   .''.  |
    |   | |   |   \  '-. '-'   '-'  '-'   '..'  |
    '^^^' '^^^'    '--'                         |
===============.  .-.  .================.  .-.  |
               | |   | |                |  '-'  |
               | |   | |                |       |
               | ':-:' |                |  .-.  |
               |  '-'  |                |  '-'  |
==============='       '================'       |


Script done on 2020-03-12 14:28:25-0400
